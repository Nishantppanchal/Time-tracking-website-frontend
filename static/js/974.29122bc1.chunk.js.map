{"version":3,"file":"static/js/974.29122bc1.chunk.js","mappings":"4IAmCA,IA5BA,SAAqBA,GAEnBC,EAAAA,EAAAA,IACO,qBAEJC,MAAK,SAACC,GAELC,EAAAA,EAAAA,UAAeC,EAAAA,EAAAA,IAAWF,EAASG,OAEnCN,GAAmB,MAGpBO,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAML,UAIlB,mDADAK,EAAML,SAASG,KAAKI,SAIpBN,EAAAA,EAAAA,UAAeC,EAAAA,EAAAA,IAAWG,EAAML,SAASG,KAAKK,YAAYL,OAE1DN,GAAmB,S,0DCM3B,IA5BA,SAAuBY,GAErBX,EAAAA,EAAAA,IACO,cAEJC,MAAK,SAACC,GAELC,EAAAA,EAAAA,UAAeS,EAAAA,EAAAA,IAASV,EAASG,OAEjCM,GAAqB,MAGtBL,OAAM,SAACC,GACNC,QAAQK,IAAIN,GAIV,mDADAA,EAAML,SAASG,KAAKI,SAIpBN,EAAAA,EAAAA,UAAeS,EAAAA,EAAAA,IAASL,EAAML,SAASG,KAAKK,YAAYL,OAExDM,GAAqB,S,+KCiF7B,UA1FA,WAEE,IAAMG,GAAWC,EAAAA,EAAAA,MAMXC,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKC,MAAMD,QAElDE,GAASJ,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMG,OAAOD,SAE7CE,GAAWL,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMK,KAAKH,SAGnD,GAA8CI,EAAAA,EAAAA,YAE5CH,EAAOI,OAAS,IAFlB,eAAOC,EAAP,KAAwB3B,EAAxB,KAKA,GAAkDyB,EAAAA,EAAAA,YAEhDF,EAASG,OAAS,IAFpB,eAAOE,EAAP,KAA0BhB,EAA1B,KAMMiB,GAAgBX,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKC,MAAMQ,iBAiD9D,OA9CAC,EAAAA,EAAAA,YAAU,WAEHD,GAIH5B,EAAAA,EAAAA,IACO,eAEJC,MAAK,SAACC,GACLY,GAASgB,EAAAA,EAAAA,IAAW5B,EAASG,OAC7BS,GAASiB,EAAAA,EAAAA,KAAiB,OAG3BzB,OAAM,SAACC,GAIJ,mDADAA,EAAML,SAASG,KAAKI,SAIpBK,GAASgB,EAAAA,EAAAA,IAAWvB,EAAML,SAASG,KAAKK,YAAYL,OACpDS,GAASiB,EAAAA,EAAAA,KAAiB,UAIjC,KAGHF,EAAAA,EAAAA,YAAU,WAEJH,IAEFM,EAAAA,EAAAA,GAAYjC,KAEb,KAGH8B,EAAAA,EAAAA,YAAU,WAEJF,IAEFM,EAAAA,EAAAA,GAActB,KAEf,IAEEe,IAAmBE,GAAkBD,GAUtC,SAAC,IAAD,KARA,4BACE,SAAC,KAAD,KACA,SAAC,IAAD,CAAQO,KAAK,UACb,SAAC,IAAD,CAAWf,KAAMH,EAASK,OAAQA","sources":["Components/LoadData/LoadCPData.js","Components/LoadData/LoadTags.js","Pages/Logs.js"],"sourcesContent":["// Import redux component\r\nimport store from '../../Store';\r\nimport { loadCPData } from '../../Features/CPData';\r\n// Import the axios instance\r\nimport axiosInstance from '../../Axios';\r\n\r\n// Function that fetch client and project data\r\nfunction fetchCPData(setIsCPDataLoading) {\r\n  // Sends a get request to get the clients and projects\r\n  axiosInstance\r\n    .get('clientProjectGet/')\r\n    // Handles the response to the request\r\n    .then((response) => {\r\n      // Set the CPData redux state to the response data\r\n      store.dispatch(loadCPData(response.data));\r\n      // Sets isCPDataLoading state to false\r\n      setIsCPDataLoading(false);\r\n    })\r\n    // Handles error\r\n    .catch((error) => {\r\n      console.error(error.response);\r\n      // If the access token is invalid\r\n      if (\r\n        error.response.data.detail ===\r\n        'Invalid token header. No credentials provided.'\r\n      ) {\r\n        // Sets the CPData state to the response data passed through the error data by axios intercept\r\n        store.dispatch(loadCPData(error.response.data.requestData.data));\r\n        // Sets isCPDataLoading state to false\r\n        setIsCPDataLoading(false);\r\n      }\r\n    });\r\n}\r\n\r\n// Export the fetchCPData\r\nexport default fetchCPData;\r\n","// Import redux component\r\nimport store from '../../Store';\r\nimport { loadTags } from '../../Features/Tags';\r\n// Import the axios instance\r\nimport axiosInstance from '../../Axios';\r\n\r\n// Function that fetchs tag data\r\nfunction fetchTagsData(setIsTagsDataLoading) {\r\n  // Sends a get request to get the tags\r\n  axiosInstance\r\n    .get('CRUD/tags/')\r\n    // Handles the response to the request\r\n    .then((response) => {\r\n      // Set the tags redux state to the response data\r\n      store.dispatch(loadTags(response.data));\r\n      // Set isTagDataLoading to false\r\n      setIsTagsDataLoading(false);\r\n    })\r\n    // Handle error\r\n    .catch((error) => {\r\n      console.log(error)\r\n      // If the access token is invalid\r\n      if (\r\n        error.response.data.detail ===\r\n        'Invalid token header. No credentials provided.'\r\n      ) {\r\n        // Set the tags redux state to the response data passed through the the error data by axios intercept\r\n        store.dispatch(loadTags(error.response.data.requestData.data));\r\n        // Set isTagDataLoading to false\r\n        setIsTagsDataLoading(false);\r\n      }\r\n    });\r\n}\r\n\r\n// Export fetchTagsData function\r\nexport default fetchTagsData;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n// Import MUI components\r\nimport { useEffect, useState } from 'react';\r\nimport './../Styles/Home.css';\r\n// Import axios instance\r\nimport axiosInstance from '../Axios.js';\r\n// Import fetching components\r\nimport fetchCPData from '../Components/LoadData/LoadCPData';\r\nimport fetchTagsData from '../Components/LoadData/LoadTags';\r\n// Import redux components\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// Import custom components\r\nimport Header from '../Components/Header';\r\n// Import luxon component\r\n\r\nimport { CssBaseline } from '@mui/material';\r\nimport LogLister from '../Components/LogsLister';\r\nimport { addAllLogs, setAllLogsLoaded } from '../Features/Logs';\r\nimport LogsLoading from '../Loading Components/LogsLoading';\r\n\r\nfunction Logs() {\r\n  // Creates dispatch function to update redux state\r\n  const dispatch = useDispatch();\r\n  // Create navigate function\r\n\r\n  // Defines all the states\r\n  // Stores data from server\r\n  // Stores data for a log\r\n  const logData = useSelector((state) => state.logs.value.logs);\r\n  // Stores clients and projects\r\n  const CPData = useSelector((state) => state.CPData.value);\r\n  // Store tags\r\n  const tagsData = useSelector((state) => state.tags.value);\r\n  // Stores whether data has loaded or not\r\n  // Stores whether all the clients and projects have loaded\r\n  const [isCPDataLoading, setIsCPDataLoading] = useState(\r\n    // If CPData is not empty make it false, else make it true\r\n    CPData.length > 0 ? false : true\r\n  );\r\n  // Stores whether all the tags have loaded\r\n  const [isTagsDataLoading, setIsTagsDataLoading] = useState(\r\n    // If tagsData is not empty make it false, else make it true\r\n    tagsData.length > 0 ? false : true\r\n  );\r\n  // Other states\r\n  // Stores whether all the logs have been loaded\r\n  const allLogsLoaded = useSelector((state) => state.logs.value.allLogsLoaded);\r\n\r\n  // Runs this code on every render/update after the DOM has updated if setLogData or loadedLogsNumber have changed\r\n  useEffect(() => {\r\n    // If the log data has not loaded yet\r\n    if (!allLogsLoaded) {\r\n      // Send the a get request to get the logs\r\n      // loadedLogNumber allows the logs to be progressively loaded\r\n      // As the user want more logs, the number increase, causing the next set of logs to be returned\r\n      axiosInstance\r\n        .get('getAllLogs/')\r\n        // Handles the response\r\n        .then((response) => {\r\n          dispatch(addAllLogs(response.data));\r\n          dispatch(setAllLogsLoaded(true));\r\n        })\r\n        // Handles errors\r\n        .catch((error) => {\r\n          // If the access token is invalid\r\n          if (\r\n            error.response.data.detail ===\r\n            'Invalid token header. No credentials provided.'\r\n          ) {\r\n            // Adds the reponse data to logs array in the logs redux state\r\n            dispatch(addAllLogs(error.response.data.requestData.data));\r\n            dispatch(setAllLogsLoaded(true));\r\n          }\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  // Runs this code on every render/update after the DOM has updated\r\n  useEffect(() => {\r\n    // If the CPData has not loaded yet\r\n    if (isCPDataLoading) {\r\n      // Runs the function that fetches the CPData\r\n      fetchCPData(setIsCPDataLoading);\r\n    }\r\n  }, []);\r\n\r\n  // Runs this code on every render/update after the DOM has updated\r\n  useEffect(() => {\r\n    // If the tags has not loaded yet\r\n    if (isTagsDataLoading) {\r\n      // Runs the function that fetches the tags\r\n      fetchTagsData(setIsTagsDataLoading);\r\n    }\r\n  }, []);\r\n\r\n  if (!isCPDataLoading && allLogsLoaded && !isTagsDataLoading) {\r\n    return (\r\n      <div>\r\n        <CssBaseline />\r\n        <Header page='logs' />\r\n        <LogLister logs={logData} CPData={CPData} />\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <LogsLoading />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Logs;\r\n"],"names":["setIsCPDataLoading","axiosInstance","then","response","store","loadCPData","data","catch","error","console","detail","requestData","setIsTagsDataLoading","loadTags","log","dispatch","useDispatch","logData","useSelector","state","logs","value","CPData","tagsData","tags","useState","length","isCPDataLoading","isTagsDataLoading","allLogsLoaded","useEffect","addAllLogs","setAllLogsLoaded","fetchCPData","fetchTagsData","page"],"sourceRoot":""}