{"version":3,"file":"static/js/634.ecdd9262.chunk.js","mappings":"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","sources":["Components/LoadData/LoadCPData.js","Components/LoadData/LoadTags.js","../node_modules/@mui/material/Zoom/Zoom.js","Loading Components/ReportsLoading.js","Pages/Reports.js"],"sourcesContent":["// Import redux component\r\nimport store from '../../Store';\r\nimport { loadCPData } from '../../Features/CPData';\r\n// Import the axios instance\r\nimport axiosInstance from '../../Axios';\r\n\r\n// Function that fetch client and project data\r\nfunction fetchCPData(setIsCPDataLoading) {\r\n  // Sends a get request to get the clients and projects\r\n  axiosInstance\r\n    .get('clientProjectGet/')\r\n    // Handles the response to the request\r\n    .then((response) => {\r\n      // Set the CPData redux state to the response data\r\n      store.dispatch(loadCPData(response.data));\r\n      // Sets isCPDataLoading state to false\r\n      setIsCPDataLoading(false);\r\n    })\r\n    // Handles error\r\n    .catch((error) => {\r\n      console.error(error.response);\r\n      // If the access token is invalid\r\n      if (\r\n        error.response.data.detail ===\r\n        'Invalid token header. No credentials provided.'\r\n      ) {\r\n        // Sets the CPData state to the response data passed through the error data by axios intercept\r\n        store.dispatch(loadCPData(error.response.data.requestData.data));\r\n        // Sets isCPDataLoading state to false\r\n        setIsCPDataLoading(false);\r\n      }\r\n    });\r\n}\r\n\r\n// Export the fetchCPData\r\nexport default fetchCPData;\r\n","// Import redux component\r\nimport store from '../../Store';\r\nimport { loadTags } from '../../Features/Tags';\r\n// Import the axios instance\r\nimport axiosInstance from '../../Axios';\r\n\r\n// Function that fetchs tag data\r\nfunction fetchTagsData(setIsTagsDataLoading) {\r\n  // Sends a get request to get the tags\r\n  axiosInstance\r\n    .get('CRUD/tags/')\r\n    // Handles the response to the request\r\n    .then((response) => {\r\n      // Set the tags redux state to the response data\r\n      store.dispatch(loadTags(response.data));\r\n      // Set isTagDataLoading to false\r\n      setIsTagsDataLoading(false);\r\n    })\r\n    // Handle error\r\n    .catch((error) => {\r\n      console.log(error)\r\n      // If the access token is invalid\r\n      if (\r\n        error.response.data.detail ===\r\n        'Invalid token header. No credentials provided.'\r\n      ) {\r\n        // Set the tags redux state to the response data passed through the the error data by axios intercept\r\n        store.dispatch(loadTags(error.response.data.requestData.data));\r\n        // Set isTagDataLoading to false\r\n        setIsTagsDataLoading(false);\r\n      }\r\n    });\r\n}\r\n\r\n// Export fetchTagsData function\r\nexport default fetchTagsData;\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"addEndListener\", \"appear\", \"children\", \"easing\", \"in\", \"onEnter\", \"onEntered\", \"onEntering\", \"onExit\", \"onExited\", \"onExiting\", \"style\", \"timeout\", \"TransitionComponent\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Transition } from 'react-transition-group';\nimport { elementAcceptingRef } from '@mui/utils';\nimport useTheme from '../styles/useTheme';\nimport { reflow, getTransitionProps } from '../transitions/utils';\nimport useForkRef from '../utils/useForkRef';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst styles = {\n  entering: {\n    transform: 'none'\n  },\n  entered: {\n    transform: 'none'\n  }\n};\n/**\n * The Zoom transition can be used for the floating variant of the\n * [Button](/material-ui/react-button/#floating-action-buttons) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n */\n\nconst Zoom = /*#__PURE__*/React.forwardRef(function Zoom(props, ref) {\n  const theme = useTheme();\n  const defaultTimeout = {\n    enter: theme.transitions.duration.enteringScreen,\n    exit: theme.transitions.duration.leavingScreen\n  };\n\n  const {\n    addEndListener,\n    appear = true,\n    children,\n    easing,\n    in: inProp,\n    onEnter,\n    onEntered,\n    onEntering,\n    onExit,\n    onExited,\n    onExiting,\n    style,\n    timeout = defaultTimeout,\n    // eslint-disable-next-line react/prop-types\n    TransitionComponent = Transition\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const nodeRef = React.useRef(null);\n  const foreignRef = useForkRef(children.ref, ref);\n  const handleRef = useForkRef(nodeRef, foreignRef);\n\n  const normalizedTransitionCallback = callback => maybeIsAppearing => {\n    if (callback) {\n      const node = nodeRef.current; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.\n\n      if (maybeIsAppearing === undefined) {\n        callback(node);\n      } else {\n        callback(node, maybeIsAppearing);\n      }\n    }\n  };\n\n  const handleEntering = normalizedTransitionCallback(onEntering);\n  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {\n    reflow(node); // So the animation always start from the start.\n\n    const transitionProps = getTransitionProps({\n      style,\n      timeout,\n      easing\n    }, {\n      mode: 'enter'\n    });\n    node.style.webkitTransition = theme.transitions.create('transform', transitionProps);\n    node.style.transition = theme.transitions.create('transform', transitionProps);\n\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  });\n  const handleEntered = normalizedTransitionCallback(onEntered);\n  const handleExiting = normalizedTransitionCallback(onExiting);\n  const handleExit = normalizedTransitionCallback(node => {\n    const transitionProps = getTransitionProps({\n      style,\n      timeout,\n      easing\n    }, {\n      mode: 'exit'\n    });\n    node.style.webkitTransition = theme.transitions.create('transform', transitionProps);\n    node.style.transition = theme.transitions.create('transform', transitionProps);\n\n    if (onExit) {\n      onExit(node);\n    }\n  });\n  const handleExited = normalizedTransitionCallback(onExited);\n\n  const handleAddEndListener = next => {\n    if (addEndListener) {\n      // Old call signature before `react-transition-group` implemented `nodeRef`\n      addEndListener(nodeRef.current, next);\n    }\n  };\n\n  return /*#__PURE__*/_jsx(TransitionComponent, _extends({\n    appear: appear,\n    in: inProp,\n    nodeRef: nodeRef,\n    onEnter: handleEnter,\n    onEntered: handleEntered,\n    onEntering: handleEntering,\n    onExit: handleExit,\n    onExited: handleExited,\n    onExiting: handleExiting,\n    addEndListener: handleAddEndListener,\n    timeout: timeout\n  }, other, {\n    children: (state, childProps) => {\n      return /*#__PURE__*/React.cloneElement(children, _extends({\n        style: _extends({\n          transform: 'scale(0)',\n          visibility: state === 'exited' && !inProp ? 'hidden' : undefined\n        }, styles[state], style, children.props.style),\n        ref: handleRef\n      }, childProps));\n    }\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Zoom.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Add a custom transition end trigger. Called with the transitioning DOM\n   * node and a done callback. Allows for more fine grained transition end\n   * logic. Note: Timeouts are still used as a fallback if provided.\n   */\n  addEndListener: PropTypes.func,\n\n  /**\n   * Perform the enter transition when it first mounts if `in` is also `true`.\n   * Set this to `false` to disable this behavior.\n   * @default true\n   */\n  appear: PropTypes.bool,\n\n  /**\n   * A single child content element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * The transition timing function.\n   * You may specify a single easing or a object containing enter and exit values.\n   */\n  easing: PropTypes.oneOfType([PropTypes.shape({\n    enter: PropTypes.string,\n    exit: PropTypes.string\n  }), PropTypes.string]),\n\n  /**\n   * If `true`, the component will transition in.\n   */\n  in: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onEnter: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onEntered: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onEntering: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExit: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExited: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onExiting: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })])\n} : void 0;\nexport default Zoom;","import { Skeleton } from '@mui/material';\r\n\r\nfunction ReportsLoading() {\r\n  return (\r\n    <Skeleton\r\n      sx={{\r\n        padding: '1rem',\r\n        margin: '1rem',\r\n        width: 'calc(100% - 2rem)',\r\n        height: '165.50px',\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default ReportsLoading;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n\r\nimport Header from '../Components/Header';\r\n\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport {\r\n  CssBaseline,\r\n  Grid,\r\n  Paper, TextField,\r\n  Typography,\r\n  Zoom\r\n} from '@mui/material';\r\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\r\nimport Collapse from '@mui/material/Collapse';\r\n\r\nimport { DateTime, Interval } from 'luxon';\r\n\r\nimport axiosInstance from '../Axios';\r\n\r\nimport fetchCPData from '../Components/LoadData/LoadCPData';\r\nimport fetchTagsData from '../Components/LoadData/LoadTags';\r\n// Import redux components\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport getTheme from '../Components/GetTheme';\r\n\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Report from '../Components/Report';\r\nimport { clearReportData, editReportData } from '../Features/ReportData';\r\nimport ReportsLoading from '../Loading Components/ReportsLoading';\r\n\r\nfunction Reports() {\r\n  const dispatch = useDispatch();\r\n\r\n  const animationDuration = 400;\r\n  const theme = getTheme();\r\n\r\n  // Stores tags\r\n  const tagsData = useSelector((state) => state.tags.value);\r\n  // Stores clients and projects data\r\n  const CPData = useSelector((state) => state.CPData.value);\r\n  const mode = useSelector((state) => state.mode.value);\r\n  const data = useSelector((state) => state.reportData.value);\r\n  // Stores the client or project selected\r\n  const [CPSelected, setCPSelected] = useState([]);\r\n  // The value inputed by the user in the client and project selection field\r\n  const [CPInputValue, setCPInputValue] = useState('');\r\n  const [tagsSelected, setTagsSelected] = useState([]);\r\n  const [tagsInputValue, setTagsInputValue] = useState('');\r\n  // Stores whether all the clients and projects have loaded\r\n  const [isCPDataLoading, setIsCPDataLoading] = useState(\r\n    // If CPData is not empty make it false, else make it true\r\n    CPData.length > 0 ? false : true\r\n  );\r\n  // Stores whether all the tags have loaded\r\n  const [isTagsDataLoading, setIsTagsDataLoading] = useState(\r\n    // If tagsData is not empty make it false, else make it true\r\n    tagsData.length > 0 ? false : true\r\n  );\r\n  const [report, setReport] = useState(data.report);\r\n  // These two are seperated as one control the collapse and the other controls the loading animation\r\n  const [reportGenerated, setReportGenerated] = useState(data.reportGenerated);\r\n  const [inputOpen, setInputOpen] = useState(true);\r\n  const [reportLoading, setReportLoading] = useState(false);\r\n  const [timeProgress, setTimeProgress] = useState(data.timeProgress);\r\n  const [CPPieColours, setCPPieColours] = useState(data.CPPieColours);\r\n  const [billableArray, setBillableArray] = useState(data.billableArray);\r\n\r\n  // Creates a filter function\r\n  const CPFilter = createFilterOptions();\r\n  // Creates a filter for the tags\r\n  const tagsFilter = createFilterOptions();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // Runs this code on every render/update after the DOM has updated\r\n  useEffect(() => {\r\n    // If the CPData has not loaded yet\r\n    if (isCPDataLoading === true) {\r\n      // Runs the function that fetches the CPData\r\n      fetchCPData(setIsCPDataLoading);\r\n      // Otherwise, if the CPData has already been loaded\r\n    }\r\n    // If tags have not loaded yet\r\n    if (isTagsDataLoading) {\r\n      // Runs the function that fetches the tags\r\n      fetchTagsData(setIsTagsDataLoading);\r\n      // Otherwise, if the tags have not already been loaded\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (reportGenerated) {\r\n      setTimeout(() => {\r\n        setInputOpen(false);\r\n      }, animationDuration + 100);\r\n    } else {\r\n      setInputOpen(true);\r\n    }\r\n  }, [reportGenerated]);\r\n\r\n  useEffect(() => {\r\n    generateCPPieColours(report);\r\n  }, [mode]);\r\n\r\n  // Handles value (what is output after client/project selected) change\r\n  function handleAutocompleteCPSelectedChange(event, newValue) {\r\n    // Sets the CPSelected state to the new client or project selected\r\n    setCPSelected(newValue);\r\n  }\r\n\r\n  // Handles input value (what is the user inputs in the textfield) change\r\n  function handleAutocompleteCPInputValueChange(event, newInputValue) {\r\n    // Sets the inputValue state to the new input value\r\n    setCPInputValue(newInputValue);\r\n  }\r\n\r\n  function handleAutocompleteTagsSelectedChange(event, newValue) {\r\n    setTagsSelected(newValue);\r\n  }\r\n\r\n  function handleAutocompleteTagsInputValueChange(event, newInputValue) {\r\n    setTagsInputValue(newInputValue);\r\n  }\r\n\r\n  async function handleGenerateReport(event) {\r\n    event.preventDefault();\r\n    const clients = [];\r\n    const projects = [];\r\n\r\n    for (var i = 0; i < CPSelected.length; i++) {\r\n      const CP = CPSelected[i];\r\n      if (CP.type === 'clients') {\r\n        clients.push(CP);\r\n      } else {\r\n        projects.push(CP);\r\n      }\r\n    }\r\n\r\n    setReportLoading(true);\r\n\r\n    const data = await axiosInstance\r\n      .post('generateReport/', {\r\n        clients: clients,\r\n        projects: projects,\r\n        tags: tagsSelected,\r\n      })\r\n      .then((response) => {\r\n        setReport(response.data);\r\n        setReportLoading(false);\r\n        setReportGenerated(true);\r\n\r\n        console.log(response.data);\r\n\r\n        return response.data;\r\n      })\r\n      .catch((error) => {\r\n        if (\r\n          error.response.data.detail ===\r\n          'Invalid token header. No credentials provided.'\r\n        ) {\r\n          setReport(error.response.data.requestData.data);\r\n          setReportLoading(false);\r\n          setReportGenerated(true);\r\n\r\n          return error.response.data.requestData.data;\r\n        }\r\n      });\r\n\r\n    var timeProgressArray = [];\r\n    if (data.logs.length > 0) {\r\n      const startDate = DateTime.fromFormat(data.logs[0].date, 'yyyy-LL-dd');\r\n      const endDate = DateTime.fromFormat(\r\n        data.logs[data.logs.length - 1].date,\r\n        'yyyy-LL-dd'\r\n      );\r\n      const duration = Interval.fromDateTimes(startDate, endDate).length(\r\n        'days'\r\n      );\r\n      var dateTimeObj = {};\r\n      for (let i = 0; i <= duration; i++) {\r\n        const date = startDate.plus({ days: i }).toFormat('yyyy-LL-dd');\r\n        dateTimeObj[date] = 0;\r\n      }\r\n      data.logs.forEach((log) => {\r\n        dateTimeObj[log.date] += log.time;\r\n      });\r\n      const entries = Object.entries(dateTimeObj);\r\n      entries.forEach((entry) => {\r\n        timeProgressArray.push({\r\n          date: entry[0],\r\n          time: entry[1],\r\n        });\r\n      });\r\n    }\r\n\r\n    setTimeProgress(timeProgressArray);\r\n\r\n    var tempBillableArray = [\r\n      { name: 'Billable', number: 0 },\r\n      { name: 'Unbillable', number: 0 },\r\n    ];\r\n    data.logs.forEach((log) => {\r\n      if (log.billable === true) {\r\n        tempBillableArray[0].number += 1;\r\n      } else {\r\n        tempBillableArray[1].number += 1;\r\n      }\r\n    });\r\n\r\n    setBillableArray(tempBillableArray);\r\n\r\n    const coloursArray = generateCPPieColours(data);\r\n    setCPPieColours(coloursArray);\r\n\r\n    const theme = getTheme();\r\n    dispatch(\r\n      editReportData({\r\n        oldTheme: theme,\r\n        report: data,\r\n        timeProgress: timeProgressArray,\r\n        billableArray: tempBillableArray,\r\n        CPPieColours: coloursArray,\r\n        reportGenerated: true,\r\n      })\r\n    );\r\n  }\r\n\r\n  function generateCPPieColours(report) {\r\n    var CPcolorArray = [];\r\n    (report.CPTimes.length >= report.tagTimes.length\r\n      ? report.CPTimes\r\n      : report.tagTimes\r\n    ).forEach(() => {\r\n      const randomColour = generateRandomColour(CPcolorArray);\r\n      CPcolorArray.push(randomColour);\r\n    });\r\n\r\n    const [min, max] = theme.palette.mode === 'light' ? [20, 50] : [50, 80];\r\n\r\n    CPcolorArray = CPcolorArray.map(\r\n      (colour) =>\r\n        'hsl(' + colour + ', 60%, ' + generateRandomNumber(min, max) + '%)'\r\n    );\r\n    setCPPieColours(CPcolorArray);\r\n    return CPcolorArray;\r\n  }\r\n\r\n  function generateRandomColour(CPcolorArray) {\r\n    var randomColor = generateRandomNumber(360, 1);\r\n    if (\r\n      CPcolorArray.find(\r\n        (colour) => colour >= randomColor - 150 && colour <= randomColor + 150\r\n      )\r\n    ) {\r\n      return generateRandomColour(CPcolorArray);\r\n    } else {\r\n      return randomColor;\r\n    }\r\n  }\r\n\r\n  function generateRandomNumber(min, max) {\r\n    return Math.floor(Math.random() * (max - min) + min);\r\n  }\r\n\r\n  function handleNewReport(event) {\r\n    event.preventDefault();\r\n\r\n    setCPSelected([]);\r\n    setTagsSelected([]);\r\n\r\n    setReportGenerated(false);\r\n\r\n    dispatch(clearReportData());\r\n  }\r\n\r\n  function handleExportReport() {\r\n    const theme = getTheme();\r\n    dispatch(\r\n      editReportData({\r\n        oldTheme: theme,\r\n        report: report,\r\n        timeProgress: timeProgress,\r\n        billableArray: billableArray,\r\n        CPPieColours: CPPieColours,\r\n        reportGenerated: true,\r\n      })\r\n    );\r\n    navigate('/report-export');\r\n  }\r\n\r\n  if (!isCPDataLoading && !isTagsDataLoading) {\r\n    return (\r\n      <>\r\n        <CssBaseline />\r\n        <Header page='reports' />\r\n        {/* In is opposite to reportGenerated as when report is not generated (false), then in has to be true */}\r\n        <Collapse in={inputOpen} timeout={animationDuration}>\r\n          <Zoom\r\n            in={!reportGenerated}\r\n            timeout={animationDuration}\r\n            style={{\r\n              transitionDelay: !reportGenerated\r\n                ? String(animationDuration + 100) + 'ms'\r\n                : '0ms',\r\n            }}\r\n          >\r\n            <Paper\r\n              sx={{\r\n                margin: '1rem 1rem 0rem',\r\n                padding: '1rem',\r\n              }}\r\n            >\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                  <Typography variant='h6' width='100%' align='center'>\r\n                    GENERATE REPORT\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Autocomplete\r\n                    multiple\r\n                    id='CP'\r\n                    options={CPData}\r\n                    // Set the option selected value in the textfield to client/project's names\r\n                    getOptionLabel={(option) => option.name}\r\n                    // Group the options by whether they are clients or projects\r\n                    groupBy={(option) => option.type}\r\n                    // Assigns filterOptions to a function that filter the client and project based on the input          filterOptions={CPFilter}\r\n                    filterOptions={CPFilter}\r\n                    // Defines what is render as the input field\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        label='CLIENTS AND PROJECTS'\r\n                        variant='outlined'\r\n                      />\r\n                    )}\r\n                    // Assign handleAutocompleteValueChange to be run on change of client or project selected\r\n                    onChange={handleAutocompleteCPSelectedChange}\r\n                    // Sets the value of the client or project selected to the CPSelected state\r\n                    value={CPSelected}\r\n                    // Assign handleAutocompleteInputValueChange to be run on change of input entered by the user\r\n                    onInputChange={handleAutocompleteCPInputValueChange}\r\n                    // Sets the input value to the state inputValue\r\n                    inputValue={CPInputValue}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Autocomplete\r\n                    multiple\r\n                    id='tags'\r\n                    options={tagsData}\r\n                    getOptionLabel={(option) => option.name}\r\n                    filterOptions={tagsFilter}\r\n                    renderInput={(params) => (\r\n                      <TextField {...params} label='TAGS' variant='outlined' />\r\n                    )}\r\n                    onChange={handleAutocompleteTagsSelectedChange}\r\n                    value={tagsSelected}\r\n                    onInputChange={handleAutocompleteTagsInputValueChange}\r\n                    inputValue={tagsInputValue}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <div\r\n                    style={{\r\n                      display: 'flex',\r\n                      width: '100%',\r\n                      justifyContent: 'end',\r\n                    }}\r\n                  >\r\n                    <LoadingButton\r\n                      loading={reportLoading}\r\n                      variant='contained'\r\n                      onClick={handleGenerateReport}\r\n                      startIcon={<AddCircleIcon />}\r\n                    >\r\n                      GENERATE\r\n                    </LoadingButton>\r\n                  </div>\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n          </Zoom>\r\n        </Collapse>\r\n        <Collapse in={reportGenerated}>\r\n          <div style={{ padding: '3rem' }}>\r\n            <Report\r\n              report={report}\r\n              timeProgress={timeProgress}\r\n              billableArray={billableArray}\r\n              CPPieColours={CPPieColours}\r\n              theme={theme}\r\n              CPData={CPData}\r\n              exportPage={false}\r\n              handleNewReport={handleNewReport}\r\n              handleExportReport={handleExportReport}\r\n            />\r\n          </div>\r\n        </Collapse>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <CssBaseline />\r\n        <Header page='reports' />\r\n        <ReportsLoading />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Reports;\r\n"],"names":["setIsCPDataLoading","axiosInstance","then","response","store","loadCPData","data","catch","error","console","detail","requestData","setIsTagsDataLoading","loadTags","log","_excluded","styles","entering","transform","entered","React","props","ref","theme","useTheme","defaultTimeout","enter","transitions","duration","enteringScreen","exit","leavingScreen","addEndListener","appear","children","easing","inProp","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent","Transition","other","_objectWithoutPropertiesLoose","nodeRef","foreignRef","useForkRef","handleRef","normalizedTransitionCallback","callback","maybeIsAppearing","node","current","undefined","handleEntering","handleEnter","isAppearing","reflow","transitionProps","getTransitionProps","mode","webkitTransition","create","transition","handleEntered","handleExiting","handleExit","handleExited","_jsx","_extends","next","state","childProps","visibility","Skeleton","sx","padding","margin","width","height","dispatch","useDispatch","animationDuration","getTheme","tagsData","useSelector","tags","value","CPData","reportData","useState","CPSelected","setCPSelected","CPInputValue","setCPInputValue","tagsSelected","setTagsSelected","tagsInputValue","setTagsInputValue","length","isCPDataLoading","isTagsDataLoading","report","setReport","reportGenerated","setReportGenerated","inputOpen","setInputOpen","reportLoading","setReportLoading","timeProgress","setTimeProgress","CPPieColours","setCPPieColours","billableArray","setBillableArray","CPFilter","createFilterOptions","tagsFilter","navigate","useNavigate","event","preventDefault","clients","projects","i","CP","type","push","timeProgressArray","logs","startDate","DateTime","date","endDate","Interval","dateTimeObj","plus","days","toFormat","forEach","time","Object","entries","entry","tempBillableArray","name","number","billable","coloursArray","generateCPPieColours","editReportData","oldTheme","CPcolorArray","CPTimes","tagTimes","randomColour","generateRandomColour","palette","min","max","map","colour","generateRandomNumber","randomColor","find","Math","floor","random","useEffect","fetchCPData","fetchTagsData","setTimeout","CssBaseline","Header","page","Collapse","transitionDelay","String","Paper","Grid","container","spacing","item","xs","Typography","variant","align","Autocomplete","multiple","id","options","getOptionLabel","option","groupBy","filterOptions","renderInput","params","TextField","label","onChange","newValue","onInputChange","newInputValue","inputValue","display","justifyContent","LoadingButton","loading","onClick","startIcon","AddCircle","Report","exportPage","handleNewReport","clearReportData","handleExportReport"],"sourceRoot":""}