{"version":3,"file":"static/js/582.7960b18b.chunk.js","mappings":"0SAqJA,UA9HA,WACE,OAAqBA,EAAAA,EAAAA,MAAbC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,GAERC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,MAEXC,EAAK,UAAe,YAATN,EAAqB,SAAW,UAAtC,eAAsDC,GAEjE,GAA8CM,EAAAA,EAAAA,WAAS,GAAvD,eAAOC,EAAP,KAAwBC,EAAxB,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOG,EAAP,KAAaC,EAAb,KAyDA,OAtDAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAM,QAAUb,EAAO,IAAMC,EAAK,IACxCa,EAAAA,EAAAA,IACOD,GACJE,MAAK,SAACC,GACLL,EAAQK,EAASC,KAAKP,MACtBD,GAAmB,MAEpBS,OAAM,SAACC,GAIJ,mDADAA,EAAMH,SAASC,KAAKG,SAGpBT,EAAQQ,EAAMH,SAASC,KAAKI,YAAYJ,KAAKP,MAC7CF,GAAgB,SAGrB,IAoCEA,GAuDI,SAAC,IAAD,KArDL,iCACE,SAAC,KAAD,KACA,SAAC,IAAD,CAAQc,KAAK,0BACb,SAAC,IAAD,CAAOC,MAAO,CAAEC,OAAQ,iBAAkBC,QAAS,QAAnD,UACE,UAAC,KAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,WACE,SAAC,KAAD,CAAMC,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CAAYC,QAAQ,KAAKC,MAAM,SAASC,MAAM,OAA9C,SACG1B,OAGL,SAAC,KAAD,CAAMsB,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,CACE5B,GAAG,OACHgC,MAAM,OACNH,QAAQ,WACRI,SAnDd,SAA0BC,GACpBA,EAAMC,OAAOC,QAAU3B,GACzBC,EAAQwB,EAAMC,OAAOC,QAkDXA,MAAO3B,EACP4B,GAAI,CAAEN,MAAO,aAGjB,UAAC,KAAD,CAAMJ,MAAI,EAACF,WAAS,EAACa,eAAe,WAAWZ,QAAS,EAAxD,WACE,SAAC,KAAD,CAAMC,MAAI,EAACC,GAAG,OAAd,UAEE,SAAC,IAAD,CAEEC,QAAQ,YAERU,QAzDhB,WACE,IAAM3B,EAAM,SAAWb,EAAO,IAAMC,EAAK,IAEzCa,EAAAA,EAAAA,MACSD,EAAK,CAAEH,KAAMA,IACnBK,MAAK,SAACC,GACLZ,GAASqC,EAAAA,EAAAA,IAAS,CAAExC,GAAIA,EAAID,KAAMA,EAAMU,KAAMA,KAC9CR,EAAS,4BAEVgB,OAAM,SAACC,GAGJ,mDADAA,EAAMH,SAASC,KAAKG,SAGpBhB,GAASqC,EAAAA,EAAAA,IAAS,CAAExC,GAAIA,EAAID,KAAMA,EAAMU,KAAMA,KAC9CR,EAAS,8BA4CDwC,WAAW,SAAC,IAAD,IANb,uBAWF,SAAC,KAAD,CAAMd,MAAI,EAACC,GAAG,OAAd,UAEE,SAAC,IAAD,CAEEC,QAAQ,YAERU,QAjDhB,SAA0BL,GAExBA,EAAMQ,iBAENzC,GAAU,IA+CIwC,WAAW,SAAC,IAAD,IANb,iC,0BC9HZE,EAAyBC,EAAQ,OAKrCC,EAAQ,OAAU,EAElB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAEhDG,EAAcH,EAAQ,OAEtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,qBACD,aAEJN,EAAQ,EAAUG,G,yBCfdL,EAAyBC,EAAQ,OAKrCC,EAAQ,OAAU,EAElB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAEhDG,EAAcH,EAAQ,OAEtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,uDACD,QAEJN,EAAQ,EAAUG","sources":["Pages/EditCP.js","../node_modules/@mui/icons-material/ArrowLeft.js","../node_modules/@mui/icons-material/Done.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\n// Import React components\r\nimport { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n// Import the axios instance\r\nimport axiosInstance from '../Axios';\r\n// Import MUI components\r\nimport ArrowLeftIcon from '@mui/icons-material/ArrowLeft';\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport Button from '@mui/material/Button';\r\nimport Skeleton from '@mui/material/Skeleton';\r\nimport TextField from '@mui/material/TextField';\r\n// Import custom component\r\nimport Header from '../Components/Header';\r\n// Import fetch components\r\n// Import redux components\r\nimport { useDispatch } from 'react-redux';\r\n// Import luxon component\r\nimport { CssBaseline, Typography } from '@mui/material';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { updateCP } from '../Features/CPData';\r\n\r\nfunction CPEditPage() {\r\n  const { type, id } = useParams();\r\n  // Creates a navigate function\r\n  const navigate = useNavigate();\r\n  // Creates a dispatch function to change the redux states\r\n  const dispatch = useDispatch();\r\n\r\n  const title = `${type === 'clients' ? 'CLIENT' : 'PROJECT'} ID ${id}`;\r\n\r\n  const [isCPDataLoading, setIsCPDataLoading] = useState(true);\r\n  const [name, setName] = useState('');\r\n\r\n  // Runs this code on every render/update after the DOM has updated\r\n  useEffect(() => {\r\n    const url = 'CRUD/' + type + '/' + id + '/';\r\n    axiosInstance\r\n      .get(url)\r\n      .then((response) => {\r\n        setName(response.data.name);\r\n        setIsCPDataLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        // If the access token is invalid\r\n        if (\r\n          error.response.data.detail ===\r\n          'Invalid token header. No credentials provided.'\r\n        ) {\r\n          setName(error.response.data.requestData.data.name);\r\n          isCPDataLoading(false);\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  function handleNameChange(event) {\r\n    if (event.target.value !== name) {\r\n      setName(event.target.value);\r\n    }\r\n  }\r\n\r\n  function handleUpdateButton() {\r\n    const url = '/CRUD/' + type + '/' + id + '/';\r\n\r\n    axiosInstance\r\n      .patch(url, { name: name })\r\n      .then((response) => {\r\n        dispatch(updateCP({ id: id, type: type, name: name }));\r\n        navigate('/clients-and-projects');\r\n      })\r\n      .catch((error) => {\r\n        if (\r\n          error.response.data.detail ===\r\n          'Invalid token header. No credentials provided.'\r\n        ) {\r\n          dispatch(updateCP({ id: id, type: type, name: name }));\r\n          navigate('/clients-and-projects');\r\n        }\r\n      });\r\n  }\r\n\r\n  // Handles when the back button is clicked\r\n  function handleBackButton(event) {\r\n    // Prevents the default actions\r\n    event.preventDefault();\r\n    // Sends the url to the dashboard page\r\n    navigate(-1);\r\n  }\r\n\r\n  if (!isCPDataLoading) {\r\n    return (\r\n      <>\r\n        <CssBaseline />\r\n        <Header page='clients and projects' />\r\n        <Paper style={{ margin: '1rem 1rem 0rem', padding: '1rem' }}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <Typography variant='h6' align='center' width='100%'>\r\n                {title}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                id='name'\r\n                label='name'\r\n                variant='outlined'\r\n                onChange={handleNameChange}\r\n                value={name}\r\n                sx={{ width: '100%' }}\r\n              />\r\n            </Grid>\r\n            <Grid item container justifyContent='flex-end' spacing={2}>\r\n              <Grid item xs='auto'>\r\n                {/* Update button */}\r\n                <Button\r\n                  // Sets the button variant to text\r\n                  variant='contained'\r\n                  // Assign handleUpdateButton to be run on click of the button\r\n                  onClick={handleUpdateButton}\r\n                  // Add a button to the start of the icon\r\n                  startIcon={<DoneIcon />}\r\n                >\r\n                  UPDATE\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs='auto'>\r\n                {/* Back button */}\r\n                <Button\r\n                  // Sets the button variant to text\r\n                  variant='contained'\r\n                  // Assign handleBackButton to be run on click of the button\r\n                  onClick={handleBackButton}\r\n                  // Add a button to the start of the icon\r\n                  startIcon={<ArrowLeftIcon />}\r\n                >\r\n                  BACK\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </>\r\n    );\r\n  } else {\r\n    return <Skeleton />;\r\n  }\r\n}\r\n\r\nexport default CPEditPage;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m14 7-5 5 5 5V7z\"\n}), 'ArrowLeft');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M9 16.2 4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\"\n}), 'Done');\n\nexports.default = _default;"],"names":["useParams","type","id","navigate","useNavigate","dispatch","useDispatch","title","useState","isCPDataLoading","setIsCPDataLoading","name","setName","useEffect","url","axiosInstance","then","response","data","catch","error","detail","requestData","page","style","margin","padding","container","spacing","item","xs","variant","align","width","label","onChange","event","target","value","sx","justifyContent","onClick","updateCP","startIcon","preventDefault","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}