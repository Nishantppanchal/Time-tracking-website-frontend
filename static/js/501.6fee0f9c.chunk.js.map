{"version":3,"file":"static/js/501.6fee0f9c.chunk.js","mappings":"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","sources":["Components/CPFilter.js","Components/DescriptionsAndTagsExtraction.js","Components/LoadData/LoadCPData.js","Components/LoadData/LoadTags.js","Components/NewCP.js","Pages/EditLogs.js","../node_modules/@mui/icons-material/ArrowLeft.js","../node_modules/@mui/icons-material/Done.js"],"sourcesContent":["import { createFilterOptions } from '@mui/material/Autocomplete';\r\n\r\n// Function that handle client and project filtering\r\nfunction CPFilter(options, params) {\r\n  // Creates a filter function\r\n  const filter = createFilterOptions();\r\n  // Creates a array of filtered options based on the input\r\n  const filtered = filter(options, params);\r\n\r\n  // Extracts the string input value from params\r\n  const { inputValue } = params;\r\n  // If the input value is not empty\r\n  if (inputValue !== '' && !filtered.some((CP) => CP.name === inputValue)) {\r\n    // Add a create new client option\r\n    filtered.push({\r\n      // Sets the type to new client or project for grouping\r\n      type: 'clients',\r\n      // Sets the name key to the 'ADD CLIENT: ' + input value\r\n      name: `ADD CLIENT: ${inputValue}`,\r\n      // Sets the newValue key's value to true\r\n      newValue: true,\r\n    });\r\n    // Add a create new project option\r\n    filtered.push({\r\n      // Sets the type to new client or project for grouping\r\n      type: 'projects',\r\n      // Sets the name key to the 'ADD PROJECT: ' + input value\r\n      name: `ADD PROJECT: ${inputValue}`,\r\n      // Sets the newValue key's value to true\r\n      newValue: true,\r\n    });\r\n  }\r\n\r\n  // Returns the filtered options array\r\n  return filtered;\r\n}\r\n\r\nexport default CPFilter;\r\n","// Import the axios instance\r\nimport axiosInstance from '../Axios';\r\n// Import redux component\r\nimport store from '../Store';\r\nimport { addTag } from '../Features/Tags';\r\n\r\n// Function that extracts description and tags from mentions textfield data\r\nasync function handleDescriptionsAndTagsExtraction(\r\n  data,\r\n  setTagsSelected,\r\n  setDescriptionRaw\r\n) {\r\n  // Set the descriptionRaw state to stringified JS code\r\n  setDescriptionRaw(JSON.stringify(data.raw));\r\n\r\n  // Creates a variable that stores a array with all the newTags\r\n  var newTags = [];\r\n  // Creates a variable that stores a array with selected tags\r\n  var tags = [];\r\n\r\n  // loops for each tag in the tags in the textfield\r\n  for (let tag of data.tags) {\r\n    // If the tag has the key newValue set to true\r\n    if (tag.newValue) {\r\n      // Create a new tag with a post request\r\n      var tagData = await axiosInstance\r\n        .post('CRUD/tags/', {\r\n          // Defines the body content of the post request\r\n          // Sets the name to the tag name\r\n          name: tag.name,\r\n          billable: tag.billable,\r\n          // Get the user id from the local storage\r\n          user: localStorage.getItem('user_id')\r\n            ? localStorage.getItem('user_id')\r\n            : sessionStorage.getItem('user_id'),\r\n        })\r\n        // Handles the response\r\n        .then((response) => {\r\n          // Return the response data\r\n          // This would be stored in the variable data\r\n          return response.data;\r\n        })\r\n        // Handles errors\r\n        .catch((error) => {\r\n          // If the access token is invalid\r\n          if (\r\n            error.response.data.detail ===\r\n            'Invalid token header. No credentials provided.'\r\n          ) {\r\n            // Return the response data passed through by axios intercept\r\n            // This would be stored in the variable data\r\n            return error.response.data.requestData.data;\r\n          }\r\n        });\r\n\r\n      // Add the new tag's ID to the tags array\r\n      tags.push(tagData.id);\r\n      // Add the new tag's data to the newTags array\r\n      newTags.push(tagData);\r\n      // Otherwise, if the tag is not a new tag\r\n    } else {\r\n      // Add the tag's ID to the tags array\r\n      tags.push(tag.id);\r\n    }\r\n  }\r\n\r\n  // Sets the tagsSelected state to the tags array\r\n  setTagsSelected(tags);\r\n  // If the newTags array is not empty\r\n  if (newTags.length !== 0) {\r\n    // Add new tags to the tags redux state\r\n    store.dispatch(addTag(newTags));\r\n    data.updateTags(newTags)\r\n  }\r\n}\r\n\r\n// Export handleDescriptionAndTagsExtraction function\r\nexport default handleDescriptionsAndTagsExtraction;\r\n","// Import redux component\r\nimport store from '../../Store';\r\nimport { loadCPData } from '../../Features/CPData';\r\n// Import the axios instance\r\nimport axiosInstance from '../../Axios';\r\n\r\n// Function that fetch client and project data\r\nfunction fetchCPData(setIsCPDataLoading) {\r\n  // Sends a get request to get the clients and projects\r\n  axiosInstance\r\n    .get('clientProjectGet/')\r\n    // Handles the response to the request\r\n    .then((response) => {\r\n      // Set the CPData redux state to the response data\r\n      store.dispatch(loadCPData(response.data));\r\n      // Sets isCPDataLoading state to false\r\n      setIsCPDataLoading(false);\r\n    })\r\n    // Handles error\r\n    .catch((error) => {\r\n      console.error(error.response);\r\n      // If the access token is invalid\r\n      if (\r\n        error.response.data.detail ===\r\n        'Invalid token header. No credentials provided.'\r\n      ) {\r\n        // Sets the CPData state to the response data passed through the error data by axios intercept\r\n        store.dispatch(loadCPData(error.response.data.requestData.data));\r\n        // Sets isCPDataLoading state to false\r\n        setIsCPDataLoading(false);\r\n      }\r\n    });\r\n}\r\n\r\n// Export the fetchCPData\r\nexport default fetchCPData;\r\n","// Import redux component\r\nimport store from '../../Store';\r\nimport { loadTags } from '../../Features/Tags';\r\n// Import the axios instance\r\nimport axiosInstance from '../../Axios';\r\n\r\n// Function that fetchs tag data\r\nfunction fetchTagsData(setIsTagsDataLoading) {\r\n  // Sends a get request to get the tags\r\n  axiosInstance\r\n    .get('CRUD/tags/')\r\n    // Handles the response to the request\r\n    .then((response) => {\r\n      // Set the tags redux state to the response data\r\n      store.dispatch(loadTags(response.data));\r\n      // Set isTagDataLoading to false\r\n      setIsTagsDataLoading(false);\r\n    })\r\n    // Handle error\r\n    .catch((error) => {\r\n      console.log(error)\r\n      // If the access token is invalid\r\n      if (\r\n        error.response.data.detail ===\r\n        'Invalid token header. No credentials provided.'\r\n      ) {\r\n        // Set the tags redux state to the response data passed through the the error data by axios intercept\r\n        store.dispatch(loadTags(error.response.data.requestData.data));\r\n        // Set isTagDataLoading to false\r\n        setIsTagsDataLoading(false);\r\n      }\r\n    });\r\n}\r\n\r\n// Export fetchTagsData function\r\nexport default fetchTagsData;\r\n","// Import axios instance\r\nimport axiosInstance from '../Axios';\r\n// Import redux component\r\nimport store from '../Store';\r\nimport { addCP } from '../Features/CPData';\r\n\r\n// The state CPSelected state is not directly changed due to there being a delay causing the request to be made before the CPSelected can change\r\n\r\n// Function that handles creation of new client and projects\r\nasync function handleNewCP(CPSelected) {\r\n  // Create a variable to store the CP selected's data\r\n  var data = CPSelected;\r\n\r\n  // If the client or project is new\r\n  if (CPSelected.newValue === true) {\r\n    // If it is a client\r\n    if (CPSelected.type === 'clients') {\r\n      // Creates a new client with a post request\r\n      // Data variable stores the new client data\r\n      data = await axiosInstance\r\n        .post('CRUD/clients/', {\r\n          // Defines the body content\r\n          // Sets name to the client name without ADD CLIENT:\r\n          name: CPSelected.name.slice(12),\r\n          // Gets the user id from local storage\r\n          user: localStorage.getItem('user_id')\r\n            ? localStorage.getItem('user_id')\r\n            : sessionStorage.getItem('user_id'),\r\n        })\r\n        // Handles response\r\n        .then((response) => {\r\n          // Adds the new client to CPData redux state\r\n          store.dispatch(addCP(response.data));\r\n          // Returns the new client data\r\n          return response.data;\r\n        })\r\n        // Handles errors\r\n        .catch((error) => {\r\n          // If the access token is invalid\r\n          if (\r\n            error.response.data.detail ===\r\n            'Invalid token header. No credentials provided.'\r\n          ) {\r\n            // Adds the new client passed through by axios intercept to CPData redux state\r\n            store.dispatch(addCP(error.response.data.requestData.data));\r\n            // Returns the new client data passed through by axios intercept\r\n            return error.response.data.requestData.data;\r\n          }\r\n        });\r\n      // If it is a project\r\n    } else {\r\n      // Creates a new project with a post request\r\n      // Data variable stores the new project data\r\n      data = await axiosInstance\r\n        .post('CRUD/projects/', {\r\n          // Defines the body content\r\n          // Sets name to the project name without ADD PROJECT:\r\n          name: CPSelected.name.slice(13),\r\n          // Gets the user id from local storage\r\n          user: localStorage.getItem('user_id')\r\n            ? localStorage.getItem('user_id')\r\n            : sessionStorage.getItem('user_id'),\r\n        })\r\n        // Handles response\r\n        .then((response) => {\r\n          // Adds the new project to CPData redux state\r\n          store.dispatch(addCP(response.data));\r\n          // Returns the new project data\r\n          return response.data;\r\n        })\r\n        // Handles errors\r\n        .catch((error) => {\r\n          // If the access token is invalid\r\n          if (\r\n            error.response.data.detail ===\r\n            'Invalid token header. No credentials provided.'\r\n          ) {\r\n            // Adds the new project passed through by axios intercept to CPData redux state\r\n            store.dispatch(addCP(error.response.data.requestData.data));\r\n            // Returns the new project data passed through by axios intercept\r\n            return error.response.data.requestData.data;\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  // Returns the CP selected's data\r\n  return data;\r\n}\r\n\r\nexport default handleNewCP;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n// Import React components\r\nimport { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n// Import the axios instance\r\nimport axiosInstance from '../Axios';\r\n// Import MUI components\r\nimport ArrowBackwardIcon from '@mui/icons-material/ArrowBackIosNew';\r\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForwardIos';\r\nimport ArrowLeftIcon from '@mui/icons-material/ArrowLeft';\r\nimport CalendarMonthIcon from '@mui/icons-material/CalendarToday';\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport AdapterLuxon from '@mui/lab/AdapterLuxon';\r\nimport Alert from '@mui/material/Alert';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Button from '@mui/material/Button';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport Grid from '@mui/material/Grid';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Modal from '@mui/material/Modal';\r\nimport Paper from '@mui/material/Paper';\r\nimport Skeleton from '@mui/material/Skeleton';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport Typography from '@mui/material/Typography';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { StaticDatePicker } from '@mui/x-date-pickers/StaticDatePicker';\r\n// Import custom component\r\nimport CPFilter from '../Components/CPFilter';\r\nimport handleDescriptionsAndTagsExtraction from '../Components/DescriptionsAndTagsExtraction';\r\nimport DescriptionWithTagsInput from '../Components/DescriptionWithTags';\r\nimport Header from '../Components/Header';\r\nimport handleNewCP from '../Components/NewCP';\r\n// Import fetch components\r\nimport fetchCPData from '../Components/LoadData/LoadCPData';\r\nimport fetchTagsData from '../Components/LoadData/LoadTags';\r\n// Import redux components\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { updateLog } from '../Features/Logs';\r\n// Import luxon component\r\nimport { CssBaseline } from '@mui/material';\r\nimport { DateTime } from 'luxon';\r\n\r\nfunction LogsEditPage() {\r\n  // Gets the id from the URL\r\n  const { id } = useParams();\r\n  // Creates a navigate function\r\n  const navigate = useNavigate();\r\n  // Creates a dispatch function to change the redux states\r\n  const dispatch = useDispatch();\r\n\r\n  // Defines title\r\n  const title = 'LOG ID ' + id;\r\n\r\n  // Defines all the states\r\n  // The states are kept seperates as state are not update instantly\r\n  // Hence seperation prevent update overides\r\n  // Stores data from server\r\n  // Stores log data\r\n  const [logData, setLogData] = useState(null);\r\n  // Gets the CPData redux data to store clients and projects data\r\n  const CPData = useSelector((state) => state.CPData.value);\r\n  // Gets the tags redux data to store tags data\r\n  const tagsData = useSelector((state) => state.tags.value);\r\n  // Stores whether data has loaded or not\r\n  // Stores whether logs have loaded\r\n  const [isLogLoading, setIsLogLoading] = useState(true);\r\n  // Stores whether all the clients and projects have loaded\r\n  const [isCPDataLoading, setIsCPDataLoading] = useState(\r\n    // If CPData is not empty make it false, else make it true\r\n    CPData.length > 0 ? false : true\r\n  );\r\n  // Stores whether all the tags have loaded\r\n  const [isTagsDataLoading, setIsTagsDataLoading] = useState(\r\n    // If tagsData is not empty make it false, else make it true\r\n    tagsData.length > 0 ? false : true\r\n  );\r\n  // Stores values of component edited by the user in the browser\r\n  // Stores the description as stringified JS code\r\n  const [descriptionRaw, setDescriptionRaw] = useState();\r\n  // Stores the tags the user has used in the description\r\n  const [tagsSelected, setTagsSelected] = useState([]);\r\n  // Stores the duration\r\n  const [duration, setDuration] = useState();\r\n  // Stores the client of project selected\r\n  const [CPSelected, setCPSelected] = useState(null);\r\n  // Stores input values of the client and project textfield\r\n  const [inputValue, setInputValue] = useState();\r\n  // Stores the date selected by the user\r\n  const [date, setDate] = useState(DateTime.now());\r\n  const [tempDate, setTempDate] = useState(null);\r\n  // Stores whether there is a error\r\n  // Stores where no fields have changed\r\n  const [noFieldsChangedError, setNoFieldsChangedError] = useState(false);\r\n\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n\r\n  // Runs this code on every render/update after the DOM has updated if setLogData has changed\r\n  useEffect(() => {\r\n    // Creates the url with the ID of log\r\n    const url = 'CRUD/logs/' + id + '/';\r\n    // Sends a get request to get the log\r\n    axiosInstance\r\n      .get(url)\r\n      // Handles the response to the get request\r\n      .then((response) => {\r\n        // Add the log data to the logData state\r\n        setLogData(response.data);\r\n        // Set the isLogLoading state to false\r\n        setIsLogLoading(false);\r\n        // Sets the duration state to the duration in the log data\r\n        setDuration(response.data.time);\r\n        // Sets the date state to the date in the log data\r\n        // The date is convert from string to a DateTime instance\r\n        setDate(DateTime.fromFormat(response.data.date, 'yyyy-LL-dd'));\r\n      })\r\n      // Handles errors\r\n      .catch((error) => {\r\n        // If the access token is invalid\r\n        if (\r\n          error.response.data.detail ===\r\n          'Invalid token header. No credentials provided.'\r\n        ) {\r\n          // Set the logData state to the log data passed through the error data by axios intercept\r\n          setLogData(error.response.data.requestData.data);\r\n          // Set the isLogLoading state to false\r\n          setIsLogLoading(false);\r\n          // Sets the duration state to the duration in the log data passed through the error data by axios intercept\r\n          setDuration(error.response.data.requestData.data.time);\r\n          // Sets the date state to the date in the log data passed through the error data by axio intercept\r\n          // The date is convert from string to a DateTime instance\r\n          setDate(\r\n            DateTime.fromFormat(\r\n              error.response.data.requestData.data.date,\r\n              'yyyy-LL-dd'\r\n            )\r\n          );\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  // Runs this code on every render/update after the DOM has updated\r\n  useEffect(() => {\r\n    // If the CPData has not loaded yet\r\n    if (isCPDataLoading === true) {\r\n      // Runs the function that fetches the CPData\r\n      fetchCPData(setIsCPDataLoading);\r\n      // Otherwise, if the CPData has already been loaded\r\n    }\r\n  }, []);\r\n\r\n  // Runs this code on every render/update after the DOM has updated\r\n  useEffect(() => {\r\n    // If tags have not loaded yet\r\n    if (isTagsDataLoading) {\r\n      // Runs the function that fetches the tags\r\n      fetchTagsData(setIsTagsDataLoading);\r\n      // Otherwise, if the tags have not already been loaded\r\n    }\r\n  }, []);\r\n\r\n  // Runs this code on every render/update after the DOM has updated if CPData and logData has changed\r\n  useEffect(() => {\r\n    // If CPData is not empty and logData is not null and the client or project selected is not null\r\n    if (CPData.length > 0 && logData != null && CPSelected == null) {\r\n      // If the log is assigned to a client\r\n      if (logData.client) {\r\n        // Find the client data with it's ID\r\n        const client = CPData.find(\r\n          (data) => data.id === logData.client && data.type === 'clients'\r\n        );\r\n        // Set the CPSelected state to the client data found\r\n        setCPSelected(client);\r\n        // If the log is assigned to a project\r\n      } else {\r\n        // Find the project data with it's ID\r\n        const project = CPData.find(\r\n          (data) => data.id === logData.project && data.type === 'projects'\r\n        );\r\n        // Set the CPSelected state to the project data found\r\n        setCPSelected(project);\r\n      }\r\n    }\r\n  }, [CPData, logData]);\r\n\r\n  // Handle change in the content within DescriptionWithTagsInput textfield\r\n  function handleDescriptionWithTagsData(data) {\r\n    // Handles the description and tags extraction\r\n    // The required values and functions are pass through\r\n    handleDescriptionsAndTagsExtraction(\r\n      data,\r\n      setTagsSelected,\r\n      setDescriptionRaw\r\n    );\r\n  }\r\n\r\n  // Handles duration change\r\n  function handleDurationChange(event) {\r\n    // If the duration has changed\r\n    if (event.target.value !== duration) {\r\n      // Sets the duration state to the new duration value entered by the user\r\n      setDuration(event.target.value);\r\n    }\r\n  }\r\n\r\n  // Handles when the update button is clicked\r\n  async function handleUpdateButton(event) {\r\n    // Prevents the default actions\r\n    event.preventDefault();\r\n\r\n    // Runs function that handles creation of new clients and projects\r\n    // The required states and setState functions are passed through\r\n    // The response client or project data is stored in createdCPData\r\n    const CPSelectedData = await handleNewCP(CPSelected);\r\n\r\n    // Creates a variable updatedData that store a empty dictionary\r\n    var updatedData = {};\r\n\r\n    // If the duration has changed\r\n    if (duration !== logData.time) {\r\n      // Set the new duration as the value for the key time in updatedData\r\n      updatedData.time = duration;\r\n    }\r\n    // If the date has changed\r\n    if (date.toFormat('yyyy-LL-dd') !== logData.date) {\r\n      // Set the new date as the value for the key date in updatedData\r\n      updatedData.date = date.toFormat('yyyy-LL-dd');\r\n    }\r\n    // If the description has changed\r\n    if (descriptionRaw !== logData.descriptionRaw) {\r\n      // All two are changed as they are all linked\r\n      // Set the new descriptionRaw as the value for the key descriptionRaw in updatedData\r\n      updatedData.descriptionRaw = descriptionRaw;\r\n      // Set the new tags selected as the value for the key tags in updatedData\r\n      updatedData.tags = tagsSelected;\r\n    }\r\n\r\n    // If the CPSelected is a client and it has changed\r\n    if (\r\n      CPSelectedData.type === 'clients' &&\r\n      CPSelectedData.id !== logData.client\r\n    ) {\r\n      // Set the new client selected as the value for the key client in updatedData\r\n      updatedData.client = CPSelectedData.id;\r\n      // Otherwise, if the CPSelected is a project and it has changed\r\n    } else if (\r\n      CPSelectedData.type === 'projects' &&\r\n      CPSelectedData.id !== logData.project\r\n    ) {\r\n      // Set the new project selected as the value for the key project in updatedData\r\n      updatedData.project = CPSelectedData.id;\r\n    }\r\n\r\n    // If there is atleast 1 key-value pair in the updatedData dictionary\r\n    if (Object.keys(updatedData).length > 0) {\r\n      // Creates the url with the ID of log\r\n      const url = 'CRUD/logs/' + id + '/';\r\n\r\n      // Partial update the log\r\n      axiosInstance\r\n        .patch(url, updatedData)\r\n        // Handles response\r\n        .then((response) => {\r\n          // Updates the logs redux state\r\n          dispatch(updateLog(response.data));\r\n          // Navigates the user back to the dashboard page\r\n          navigate('/dashboard');\r\n        })\r\n        .catch((error) => {\r\n          // If the access token is invalid\r\n          if (\r\n            error.response.data.detail ===\r\n            'Invalid token header. No credentials provided.'\r\n          ) {\r\n            // Updates the logs redux state\r\n            dispatch(updateLog(error.response.data.requestData.data));\r\n            // Navigates the user back to the dashboard page\r\n            navigate('/dashboard');\r\n          }\r\n        });\r\n      // Otherwise, if not changes have been made\r\n    } else {\r\n      // Set the noFieldChangedError state to true\r\n      // This causes a error alert to appear\r\n      setNoFieldsChangedError(true);\r\n    }\r\n  }\r\n\r\n  // Handles value (what is output after client/project selected) change\r\n  function handleAutocompleteSelectedChange(event, newValue) {\r\n    // Sets the CPSelected state to the new client or project selected\r\n    setCPSelected(newValue);\r\n  }\r\n\r\n  // Handles input value (what is the user inputs in the textfield) change\r\n  function handleAutocompleteInputValueChange(event, newInputValue) {\r\n    // Sets the inputValue state to the new input value\r\n    setInputValue(newInputValue);\r\n  }\r\n\r\n  // Handles when the back button is clicked\r\n  function handleBackButton(event) {\r\n    // Prevents the default actions\r\n    event.preventDefault();\r\n    try {\r\n      // Sends the url to the dashboard page\r\n      navigate(-1);\r\n    } catch {\r\n      navigate('/');\r\n    }\r\n  }\r\n\r\n  function handleModalOpenClose(event) {\r\n    event.preventDefault();\r\n    setTempDate(date);\r\n    setModalOpen(!modalOpen);\r\n  }\r\n\r\n  function handleDatePicked(newDate) {\r\n    if (newDate !== date) {\r\n      setTempDate(newDate);\r\n    }\r\n  }\r\n\r\n  function handleDatePickedCancel() {\r\n    setModalOpen(!modalOpen);\r\n  }\r\n\r\n  function handleDatePickedConfirm() {\r\n    setDate(tempDate);\r\n    setModalOpen(!modalOpen);\r\n  }\r\n\r\n  function handleBackDate(event) {\r\n    event.preventDefault();\r\n    setDate(date.plus({ days: -1 }));\r\n  }\r\n\r\n  function handleForwardDate(event) {\r\n    event.preventDefault();\r\n    setDate(date.plus({ days: 1 }));\r\n  }\r\n\r\n  // If all the date loading states are false\r\n  // This would mean all the data has loaded\r\n  if (!isLogLoading && !isCPDataLoading && !isTagsDataLoading) {\r\n    // This is the JSX will be rendered\r\n    return (\r\n      <div>\r\n        <CssBaseline />\r\n        {/* App bar */}\r\n        <Header />\r\n\r\n        <Paper\r\n          style={{\r\n            margin: '1rem 1rem 0rem',\r\n            padding: '1rem',\r\n          }}\r\n        >\r\n          <Stack direction='column' spacing={2} justifyContent='center'>\r\n            {/* Header with log id */}\r\n            <Typography variant='h6' align='center' width='100%'>\r\n              {title}\r\n            </Typography>\r\n            <Stack direction='row' justifyContent='center' spacing={2}>\r\n              <IconButton aria-label='delete' onClick={handleBackDate}>\r\n                <ArrowBackwardIcon />\r\n              </IconButton>\r\n              <Button\r\n                variant='contained'\r\n                onClick={handleModalOpenClose}\r\n                endIcon={<CalendarMonthIcon />}\r\n              >\r\n                {date.toFormat('dd/MM/yyyy')}\r\n              </Button>\r\n              <IconButton aria-label='delete' onClick={handleForwardDate}>\r\n                <ArrowForwardIcon />\r\n              </IconButton>\r\n            </Stack>\r\n            <Grid container widt='100%'>\r\n              <Grid item xs={3} padding={1} height='72px'>\r\n                {/* Textfield for duration */}\r\n                <TextField\r\n                  // Sets id to duration\r\n                  id='duration'\r\n                  // Sets label to duration\r\n                  label='DURATION'\r\n                  // Sets the varient/style to filled\r\n                  variant='outlined'\r\n                  // Sets the width to 15%\r\n                  sx={{ width: '100%' }}\r\n                  // Assign handleDurationChange to be run on change by user\r\n                  onChange={handleDurationChange}\r\n                  // Sets the value of the textfield to the duration state\r\n                  value={duration}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={3} padding={1} height='72px'>\r\n                {/* Client and project textfield with suggestions */}\r\n                <Autocomplete\r\n                  // Sets id to CP\r\n                  id='CP'\r\n                  // Sets the possible inputs to CPData\r\n                  options={CPData}\r\n                  // Set the option selected value in the textfield to client/project's names\r\n                  getOptionLabel={(option) => option.name}\r\n                  // Group the options by whether they are clients or projects\r\n                  groupBy={(option) => option.type}\r\n                  // Sets the width to 30%\r\n                  sx={{ width: '100%' }}\r\n                  // Assigns filterOptions to a function that filter the client and project based on the input\r\n                  filterOptions={CPFilter}\r\n                  // Defines what is render as the input field\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      label='CLIENT OR PROJECT'\r\n                      variant='outlined'\r\n                    />\r\n                  )}\r\n                  // Assign handleAutocompleteSelectedChange to be run on change of client or project selected\r\n                  onChange={handleAutocompleteSelectedChange}\r\n                  // Sets the value of the client or project selected to the CPSelected state\r\n                  value={CPSelected}\r\n                  // Assign handleAutocompleteInputValueChange to be run on change of input entered by the user\r\n                  onInputChange={handleAutocompleteInputValueChange}\r\n                  // Sets the input value to the state inputValue\r\n                  inputValue={inputValue}\r\n                />\r\n              </Grid>\r\n              <Grid item xs padding={1} height='72px'>\r\n                {/* Custom field for description with tags */}\r\n                <DescriptionWithTagsInput\r\n                  // Set initial of this component not to be empty\r\n                  empty={false}\r\n                  // Pass through all the tags\r\n                  tags={tagsData}\r\n                  // Assign handleDescriptionWithTagsData to be run to process the content in this component\r\n                  data={handleDescriptionWithTagsData}\r\n                  // Assign clear to null as field clearing is not required here\r\n                  clear={null}\r\n                  // Provides the initial state to the component\r\n                  intialField={logData.descriptionRaw}\r\n                  // Sets readOnly to false so user can edit the description\r\n                  readOnly={false}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Stack direction='row' spacing={2} justifyContent='flex-end'>\r\n              {/* Back button */}\r\n              <Button\r\n                // Sets the button variant to text\r\n                variant='contained'\r\n                // Assign handleBackButton to be run on click of the button\r\n                onClick={handleBackButton}\r\n                // Add a button to the start of the icon\r\n                startIcon={<ArrowLeftIcon />}\r\n              >\r\n                CANCEL\r\n              </Button>\r\n              {/* Update button */}\r\n              <Button\r\n                // Sets the button variant to text\r\n                variant='contained'\r\n                // Assign handleUpdateButton to be run on click of the button\r\n                onClick={handleUpdateButton}\r\n                // Add a button to the start of the icon\r\n                startIcon={<DoneIcon />}\r\n              >\r\n                UPDATE\r\n              </Button>\r\n            </Stack>\r\n          </Stack>\r\n          {/* No fields changed error alert */}\r\n          <Collapse\r\n            // Direction the componets would close and open\r\n            orientation='vertical'\r\n            // Set noFieldChangedError state as whether the alert is visible or not\r\n            in={noFieldsChangedError}\r\n            // Sets the width to 40%\r\n            sx={{ width: '40%' }}\r\n          >\r\n            {/* Red alert component itself */}\r\n            <Alert severity='error'>No fields changed</Alert>\r\n          </Collapse>\r\n          <Modal open={modalOpen} onClose={handleModalOpenClose}>\r\n            <Paper\r\n              sx={{\r\n                padding: '0.5rem',\r\n                position: 'absolute',\r\n                top: '50%',\r\n                left: '50%',\r\n                transform: 'translate(-50%, -50%)',\r\n              }}\r\n            >\r\n              <Typography variant='h6' align='center' margin='0.5rem'>\r\n                SELECT A DATE\r\n              </Typography>\r\n              {/* Sets the library to be used for date picker */}\r\n              <LocalizationProvider dateAdapter={AdapterLuxon}>\r\n                <StaticDatePicker\r\n                  displayStaticWrapperAs='desktop'\r\n                  openTo='day'\r\n                  value={tempDate}\r\n                  onChange={handleDatePicked}\r\n                  renderInput={(params) => <TextField {...params} />}\r\n                />\r\n              </LocalizationProvider>\r\n              <Stack\r\n                direction='row'\r\n                spacing={1}\r\n                justifyContent='flex-end'\r\n                marginTop='0.5rem'\r\n              >\r\n                <Button\r\n                  variant='text'\r\n                  onClick={handleDatePickedCancel}\r\n                  sx={{ color: '#3181CB' }}\r\n                >\r\n                  CANCEL\r\n                </Button>\r\n                <Button\r\n                  variant='text'\r\n                  onClick={handleDatePickedConfirm}\r\n                  sx={{ color: '#3181CB' }}\r\n                >\r\n                  CONFIRM\r\n                </Button>\r\n              </Stack>\r\n            </Paper>\r\n          </Modal>\r\n        </Paper>\r\n      </div>\r\n    );\r\n    // Otherwise if all the data has not loaded yet\r\n  } else {\r\n    // Display a loading animation\r\n    return <Skeleton />;\r\n  }\r\n}\r\n\r\n// Exports EditPage\r\nexport default LogsEditPage;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m14 7-5 5 5 5V7z\"\n}), 'ArrowLeft');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M9 16.2 4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\"\n}), 'Done');\n\nexports.default = _default;"],"names":["options","params","filtered","createFilterOptions","filter","inputValue","some","CP","name","push","type","newValue","data","setTagsSelected","setDescriptionRaw","JSON","stringify","raw","newTags","tags","tag","axiosInstance","billable","user","localStorage","getItem","sessionStorage","then","response","catch","error","detail","requestData","tagData","id","length","store","addTag","updateTags","handleDescriptionsAndTagsExtraction","setIsCPDataLoading","loadCPData","console","setIsTagsDataLoading","loadTags","log","handleNewCP","CPSelected","slice","addCP","useParams","navigate","useNavigate","dispatch","useDispatch","title","useState","logData","setLogData","CPData","useSelector","state","value","tagsData","isLogLoading","setIsLogLoading","isCPDataLoading","isTagsDataLoading","descriptionRaw","tagsSelected","duration","setDuration","setCPSelected","setInputValue","DateTime","date","setDate","tempDate","setTempDate","noFieldsChangedError","setNoFieldsChangedError","modalOpen","setModalOpen","event","preventDefault","CPSelectedData","updatedData","time","toFormat","client","project","Object","keys","url","updateLog","handleModalOpenClose","useEffect","fetchCPData","fetchTagsData","find","style","margin","padding","direction","spacing","justifyContent","variant","align","width","onClick","plus","days","endIcon","container","widt","item","xs","height","label","sx","onChange","target","getOptionLabel","option","groupBy","filterOptions","CPFilter","renderInput","onInputChange","newInputValue","empty","clear","intialField","readOnly","startIcon","orientation","in","severity","open","onClose","position","top","left","transform","dateAdapter","AdapterLuxon","displayStaticWrapperAs","openTo","newDate","marginTop","color","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}