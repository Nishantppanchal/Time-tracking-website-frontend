{"version":3,"file":"static/js/186.25626e04.chunk.js","mappings":"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","sources":["Components/CPFilter.js","Components/DescriptionsAndTagsExtraction.js","Components/LoadData/LoadCPData.js","Components/LoadData/LoadTags.js","Components/NewCP.js","Components/LoadData/LoadLogs.js","Components/LogHeader.js","Pages/Dashboard.js"],"sourcesContent":["import { createFilterOptions } from '@mui/material/Autocomplete';\r\n\r\n// Function that handle client and project filtering\r\nfunction CPFilter(options, params) {\r\n  // Creates a filter function\r\n  const filter = createFilterOptions();\r\n  // Creates a array of filtered options based on the input\r\n  const filtered = filter(options, params);\r\n\r\n  // Extracts the string input value from params\r\n  const { inputValue } = params;\r\n  // If the input value is not empty\r\n  if (inputValue !== '' && !filtered.some((CP) => CP.name === inputValue)) {\r\n    // Add a create new client option\r\n    filtered.push({\r\n      // Sets the type to new client or project for grouping\r\n      type: 'clients',\r\n      // Sets the name key to the 'ADD CLIENT: ' + input value\r\n      name: `ADD CLIENT: ${inputValue}`,\r\n      // Sets the newValue key's value to true\r\n      newValue: true,\r\n    });\r\n    // Add a create new project option\r\n    filtered.push({\r\n      // Sets the type to new client or project for grouping\r\n      type: 'projects',\r\n      // Sets the name key to the 'ADD PROJECT: ' + input value\r\n      name: `ADD PROJECT: ${inputValue}`,\r\n      // Sets the newValue key's value to true\r\n      newValue: true,\r\n    });\r\n  }\r\n\r\n  // Returns the filtered options array\r\n  return filtered;\r\n}\r\n\r\nexport default CPFilter;\r\n","// Import the axios instance\r\nimport axiosInstance from '../Axios';\r\n// Import redux component\r\nimport store from '../Store';\r\nimport { addTag } from '../Features/Tags';\r\n\r\n// Function that extracts description and tags from mentions textfield data\r\nasync function handleDescriptionsAndTagsExtraction(\r\n  data,\r\n  setTagsSelected,\r\n  setDescriptionRaw\r\n) {\r\n  // Set the descriptionRaw state to stringified JS code\r\n  setDescriptionRaw(JSON.stringify(data.raw));\r\n\r\n  // Creates a variable that stores a array with all the newTags\r\n  var newTags = [];\r\n  // Creates a variable that stores a array with selected tags\r\n  var tags = [];\r\n\r\n  // loops for each tag in the tags in the textfield\r\n  for (let tag of data.tags) {\r\n    // If the tag has the key newValue set to true\r\n    if (tag.newValue) {\r\n      // Create a new tag with a post request\r\n      var tagData = await axiosInstance\r\n        .post('CRUD/tags/', {\r\n          // Defines the body content of the post request\r\n          // Sets the name to the tag name\r\n          name: tag.name,\r\n          billable: tag.billable,\r\n          // Get the user id from the local storage\r\n          user: localStorage.getItem('user_id')\r\n            ? localStorage.getItem('user_id')\r\n            : sessionStorage.getItem('user_id'),\r\n        })\r\n        // Handles the response\r\n        .then((response) => {\r\n          // Return the response data\r\n          // This would be stored in the variable data\r\n          return response.data;\r\n        })\r\n        // Handles errors\r\n        .catch((error) => {\r\n          // If the access token is invalid\r\n          if (\r\n            error.response.data.detail ===\r\n            'Invalid token header. No credentials provided.'\r\n          ) {\r\n            // Return the response data passed through by axios intercept\r\n            // This would be stored in the variable data\r\n            return error.response.data.requestData.data;\r\n          }\r\n        });\r\n\r\n      // Add the new tag's ID to the tags array\r\n      tags.push(tagData.id);\r\n      // Add the new tag's data to the newTags array\r\n      newTags.push(tagData);\r\n      // Otherwise, if the tag is not a new tag\r\n    } else {\r\n      // Add the tag's ID to the tags array\r\n      tags.push(tag.id);\r\n    }\r\n  }\r\n\r\n  // Sets the tagsSelected state to the tags array\r\n  setTagsSelected(tags);\r\n  // If the newTags array is not empty\r\n  if (newTags.length !== 0) {\r\n    // Add new tags to the tags redux state\r\n    store.dispatch(addTag(newTags));\r\n    data.updateTags(newTags)\r\n  }\r\n}\r\n\r\n// Export handleDescriptionAndTagsExtraction function\r\nexport default handleDescriptionsAndTagsExtraction;\r\n","// Import redux component\r\nimport store from '../../Store';\r\nimport { loadCPData } from '../../Features/CPData';\r\n// Import the axios instance\r\nimport axiosInstance from '../../Axios';\r\n\r\n// Function that fetch client and project data\r\nfunction fetchCPData(setIsCPDataLoading) {\r\n  // Sends a get request to get the clients and projects\r\n  axiosInstance\r\n    .get('clientProjectGet/')\r\n    // Handles the response to the request\r\n    .then((response) => {\r\n      // Set the CPData redux state to the response data\r\n      store.dispatch(loadCPData(response.data));\r\n      // Sets isCPDataLoading state to false\r\n      setIsCPDataLoading(false);\r\n    })\r\n    // Handles error\r\n    .catch((error) => {\r\n      console.error(error.response);\r\n      // If the access token is invalid\r\n      if (\r\n        error.response.data.detail ===\r\n        'Invalid token header. No credentials provided.'\r\n      ) {\r\n        // Sets the CPData state to the response data passed through the error data by axios intercept\r\n        store.dispatch(loadCPData(error.response.data.requestData.data));\r\n        // Sets isCPDataLoading state to false\r\n        setIsCPDataLoading(false);\r\n      }\r\n    });\r\n}\r\n\r\n// Export the fetchCPData\r\nexport default fetchCPData;\r\n","// Import redux component\r\nimport store from '../../Store';\r\nimport { loadTags } from '../../Features/Tags';\r\n// Import the axios instance\r\nimport axiosInstance from '../../Axios';\r\n\r\n// Function that fetchs tag data\r\nfunction fetchTagsData(setIsTagsDataLoading) {\r\n  // Sends a get request to get the tags\r\n  axiosInstance\r\n    .get('CRUD/tags/')\r\n    // Handles the response to the request\r\n    .then((response) => {\r\n      // Set the tags redux state to the response data\r\n      store.dispatch(loadTags(response.data));\r\n      // Set isTagDataLoading to false\r\n      setIsTagsDataLoading(false);\r\n    })\r\n    // Handle error\r\n    .catch((error) => {\r\n      console.log(error)\r\n      // If the access token is invalid\r\n      if (\r\n        error.response.data.detail ===\r\n        'Invalid token header. No credentials provided.'\r\n      ) {\r\n        // Set the tags redux state to the response data passed through the the error data by axios intercept\r\n        store.dispatch(loadTags(error.response.data.requestData.data));\r\n        // Set isTagDataLoading to false\r\n        setIsTagsDataLoading(false);\r\n      }\r\n    });\r\n}\r\n\r\n// Export fetchTagsData function\r\nexport default fetchTagsData;\r\n","// Import axios instance\r\nimport axiosInstance from '../Axios';\r\n// Import redux component\r\nimport store from '../Store';\r\nimport { addCP } from '../Features/CPData';\r\n\r\n// The state CPSelected state is not directly changed due to there being a delay causing the request to be made before the CPSelected can change\r\n\r\n// Function that handles creation of new client and projects\r\nasync function handleNewCP(CPSelected) {\r\n  // Create a variable to store the CP selected's data\r\n  var data = CPSelected;\r\n\r\n  // If the client or project is new\r\n  if (CPSelected.newValue === true) {\r\n    // If it is a client\r\n    if (CPSelected.type === 'clients') {\r\n      // Creates a new client with a post request\r\n      // Data variable stores the new client data\r\n      data = await axiosInstance\r\n        .post('CRUD/clients/', {\r\n          // Defines the body content\r\n          // Sets name to the client name without ADD CLIENT:\r\n          name: CPSelected.name.slice(12),\r\n          // Gets the user id from local storage\r\n          user: localStorage.getItem('user_id')\r\n            ? localStorage.getItem('user_id')\r\n            : sessionStorage.getItem('user_id'),\r\n        })\r\n        // Handles response\r\n        .then((response) => {\r\n          // Adds the new client to CPData redux state\r\n          store.dispatch(addCP(response.data));\r\n          // Returns the new client data\r\n          return response.data;\r\n        })\r\n        // Handles errors\r\n        .catch((error) => {\r\n          // If the access token is invalid\r\n          if (\r\n            error.response.data.detail ===\r\n            'Invalid token header. No credentials provided.'\r\n          ) {\r\n            // Adds the new client passed through by axios intercept to CPData redux state\r\n            store.dispatch(addCP(error.response.data.requestData.data));\r\n            // Returns the new client data passed through by axios intercept\r\n            return error.response.data.requestData.data;\r\n          }\r\n        });\r\n      // If it is a project\r\n    } else {\r\n      // Creates a new project with a post request\r\n      // Data variable stores the new project data\r\n      data = await axiosInstance\r\n        .post('CRUD/projects/', {\r\n          // Defines the body content\r\n          // Sets name to the project name without ADD PROJECT:\r\n          name: CPSelected.name.slice(13),\r\n          // Gets the user id from local storage\r\n          user: localStorage.getItem('user_id')\r\n            ? localStorage.getItem('user_id')\r\n            : sessionStorage.getItem('user_id'),\r\n        })\r\n        // Handles response\r\n        .then((response) => {\r\n          // Adds the new project to CPData redux state\r\n          store.dispatch(addCP(response.data));\r\n          // Returns the new project data\r\n          return response.data;\r\n        })\r\n        // Handles errors\r\n        .catch((error) => {\r\n          // If the access token is invalid\r\n          if (\r\n            error.response.data.detail ===\r\n            'Invalid token header. No credentials provided.'\r\n          ) {\r\n            // Adds the new project passed through by axios intercept to CPData redux state\r\n            store.dispatch(addCP(error.response.data.requestData.data));\r\n            // Returns the new project data passed through by axios intercept\r\n            return error.response.data.requestData.data;\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  // Returns the CP selected's data\r\n  return data;\r\n}\r\n\r\nexport default handleNewCP;\r\n","// Import the axios instance\r\nimport axiosInstance from '../../Axios';\r\n// Import redux component\r\nimport store from '../../Store';\r\nimport { addLog, setAllLogsLoaded } from '../../Features/Logs';\r\n\r\n// Function that fetchs the logs\r\n// The required values and functions are passed through\r\nfunction fetchLogs(loadingState) {\r\n  // Gets redux state\r\n  const state = store.getState();\r\n  const loadedLogsNumber = state.logs.value.loadedLogsNumber;\r\n\r\n  // Send the a get request to get the logs\r\n  // loadedLogNumber allows the logs to be progressively loaded\r\n  // As the user want more logs, the number increase, causing the next set of logs to be returned\r\n  axiosInstance\r\n    .get('CRUD/logs/', { params: { number: loadedLogsNumber } })\r\n    // Handles the response\r\n    .then((response) => {\r\n      console.log(response)\r\n      // If there is one or more logs in the response data\r\n      if (response.data.length > 0) {\r\n        // Adds the reponse data to logs array in the logs redux state\r\n        store.dispatch(addLog(response.data));\r\n        // If there are no logs in the response data\r\n      } else {\r\n        // Set allLogsLoaded in logs redux state to true\r\n        // Cause the the load more button to be disabled\r\n        store.dispatch(setAllLogsLoaded(true));\r\n      }\r\n\r\n      // Set isLogDataLoading to false\r\n      // This tells the application that the logs loaded\r\n      loadingState(false);\r\n    })\r\n    // Handles errors\r\n    .catch((error) => {\r\n      console.log(error)\r\n      // If the access token is invalid\r\n      if (\r\n        error.response.data.detail ===\r\n        'Invalid token header. No credentials provided.'\r\n      ) {\r\n        // If there are one or more logs in the response data passed through by axios intercept\r\n        if (error.response.data.requestData.data.length > 0) {\r\n          // Adds the reponse data to logs array in the logs redux state\r\n          store.dispatch(addLog(error.response.data.requestData.data));\r\n          // If there are no logs in the response data passed through by axios intercept\r\n        } else {\r\n          // Set allLogsLoaded in logs redux state to true\r\n          // Cause the the load more button to be disabled\r\n          store.dispatch(setAllLogsLoaded(true));\r\n        }\r\n\r\n        // Set isLogDataLoading to false\r\n        // This tells the application that the logs loaded\r\n        loadingState(false);\r\n      }\r\n    });\r\n}\r\n\r\n// Export fetchLogs function\r\nexport default fetchLogs;\r\n","// Import MUI components\r\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\r\nimport ArrowBackwardIcon from '@mui/icons-material/ArrowBackIosNew';\r\nimport ArrowForwardIcon from '@mui/icons-material/ArrowForwardIos';\r\nimport CalendarMonthIcon from '@mui/icons-material/CalendarToday';\r\nimport Autocomplete from '@mui/material/Autocomplete';\r\nimport Button from '@mui/material/Button';\r\nimport Grid from '@mui/material/Grid';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Paper from '@mui/material/Paper';\r\nimport Stack from '@mui/material/Stack';\r\nimport TextField from '@mui/material/TextField';\r\nimport { AdapterLuxon } from '@mui/x-date-pickers/AdapterLuxon';\r\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\r\nimport { StaticDatePicker } from '@mui/x-date-pickers/StaticDatePicker';\r\n// Import custom component\r\nimport CPFilter from './CPFilter';\r\nimport handleDescriptionsAndTagsExtraction from './DescriptionsAndTagsExtraction';\r\nimport DescriptionWithTagsInput from './DescriptionWithTags';\r\nimport handleNewCP from './NewCP';\r\n// Import axios instance\r\nimport axiosInstance from '../Axios';\r\n// Import redux components\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addLog } from '../Features/Logs';\r\n// Import React components\r\nimport { useState } from 'react';\r\n// Import luxon component\r\nimport { Modal, Typography } from '@mui/material';\r\nimport { DateTime } from 'luxon';\r\n\r\nfunction LogHeader(props) {\r\n  // Creates dispatch function to update redux state\r\n  const dispatch = useDispatch();\r\n\r\n  // Defines all the states\r\n  // Stores data from server\r\n  // Stores tags\r\n  const tagsData = useSelector((state) => state.tags.value);\r\n  // Stores clients and projects data\r\n  const CPData = useSelector((state) => state.CPData.value);\r\n  // Stores the values in fields\r\n  // Stores the value in the date field with the initial value as date time now\r\n  const [date, setDate] = useState(DateTime.now());\r\n  const [tempDate, setTempDate] = useState(null);\r\n  // Stores the client or project selected\r\n  const [CPSelected, setCPSelected] = useState(null);\r\n  // Stores the duration\r\n  const [duration, setDuration] = useState('');\r\n  // Stores the raw description data\r\n  const [descriptionRaw, setDescriptionRaw] = useState();\r\n  // Stores the tags selected\r\n  const [tagsSelected, setTagsSelected] = useState([]);\r\n  // The value inputted by the user in the client and project selection field\r\n  const [inputValue, setInputValue] = useState('');\r\n  // Other\r\n  // Allow field clearing on value change\r\n  const [clearField, setClearField] = useState(true);\r\n\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n\r\n  // Handles duration change\r\n  function handleDurationChange(event) {\r\n    // Sets the duration to the new duration value\r\n    setDuration(event.target.value);\r\n  }\r\n\r\n  // Handle change in the content within DescriptionWithTagsInput textfield\r\n  async function handleDescriptionWithTagsData(data) {\r\n    // Handles the description and tags extraction\r\n    // The required values and functions are pass through\r\n    handleDescriptionsAndTagsExtraction(\r\n      data,\r\n      setTagsSelected,\r\n      setDescriptionRaw\r\n    );\r\n  }\r\n\r\n  // Handles log button click\r\n  async function handleLogButton(event) {\r\n    // Prevents default action on click of button\r\n    event.preventDefault();\r\n\r\n    // Runs function that handles creation of new clients and projects\r\n    // The required states and setState functions are passed through\r\n    // The response client or project data is stored in createdCPData\r\n    const CPSelectedData = await handleNewCP(CPSelected);\r\n\r\n    // If the client or project selected is a client\r\n    if (CPSelectedData.type === 'clients') {\r\n      // Sends a post request to create a new log\r\n      axiosInstance\r\n        .post('CRUD/logs/', {\r\n          // Sets the required fields\r\n          // Sets the time field\r\n          time: duration,\r\n          // Sets the date field after formatting the date\r\n          date: date.toFormat('yyyy-LL-dd'),\r\n          // Sets descriptionRaw which stores the raw js code for the description field\r\n          descriptionRaw: descriptionRaw,\r\n          // Sets the selected tags\r\n          tags: tagsSelected,\r\n          // Sets the client selected\r\n          client: CPSelectedData.id,\r\n          // Sets the user ID from it appropriate location\r\n          user: localStorage.getItem('user_id')\r\n            ? localStorage.getItem('user_id')\r\n            : sessionStorage.getItem('user_id'),\r\n        })\r\n        // Handles the response\r\n        .then((response) => {\r\n          // Adds the new log to logData\r\n          dispatch(addLog([response.data]));\r\n        })\r\n        // Handles errors\r\n        .catch((error) => {\r\n          console.log(error.response.data);\r\n          // If the access token is invalid\r\n          if (\r\n            error.response.data.detail ===\r\n            'Invalid token header. No credentials provided.'\r\n          ) {\r\n            // The response data passed through by axios intercept is added to logData\r\n            dispatch(addLog([error.response.data.requestData.data]));\r\n          }\r\n        });\r\n      // If the client or project selected is a project\r\n    } else {\r\n      axiosInstance\r\n        .post('CRUD/logs/', {\r\n          // Sets the required fields\r\n          // Sets the time field\r\n          time: duration,\r\n          // Sets the date field after formatting the date\r\n          date: date.toFormat('yyyy-LL-dd'),\r\n          // Sets descriptionRaw which stores the raw js code for the description field\r\n          descriptionRaw: descriptionRaw,\r\n          // Sets the selected tags\r\n          tags: tagsSelected,\r\n          // Sets the client selected\r\n          project: CPSelectedData.id,\r\n          // Sets the user ID from it appropriate location\r\n          user: localStorage.getItem('user_id')\r\n            ? localStorage.getItem('user_id')\r\n            : sessionStorage.getItem('user_id'),\r\n        })\r\n        // Handles the response\r\n        .then((response) => {\r\n          // Adds the new log to logData\r\n          dispatch(addLog([response.data]));\r\n        })\r\n        // Handles errors\r\n        .catch((error) => {\r\n          // If the access token is invalid\r\n          if (\r\n            error.response.data.detail ===\r\n            'Invalid token header. No credentials provided.'\r\n          ) {\r\n            // The response data passed through by axios intercept is added to logData\r\n            dispatch(addLog([error.response.data.requestData.data]));\r\n          } else {\r\n            console.log(error);\r\n          }\r\n        });\r\n    }\r\n\r\n    // Resets all the logHeader fields\r\n    // Clears duration field\r\n    setDuration('');\r\n    // Clears client or project selection field\r\n    setCPSelected(null);\r\n    setInputValue('');\r\n    // Clears the description field\r\n    setClearField(!clearField);\r\n  }\r\n\r\n  // Handles value (what is output after client/project selected) change\r\n  function handleAutocompleteSelectedChange(event, newValue) {\r\n    // Sets the CPSelected state to the new client or project selected\r\n    setCPSelected(newValue);\r\n  }\r\n\r\n  // Handles input value (what is the user inputs in the textfield) change\r\n  function handleAutocompleteInputValueChange(event, newInputValue) {\r\n    // Sets the inputValue state to the new input value\r\n    setInputValue(newInputValue);\r\n  }\r\n\r\n  function handleModalOpenClose(event) {\r\n    event.preventDefault();\r\n    setTempDate(date);\r\n    setModalOpen(!modalOpen);\r\n  }\r\n\r\n  function handleDatePicked(newDate) {\r\n    if (newDate !== date) {\r\n      setTempDate(newDate);\r\n    }\r\n  }\r\n\r\n  function handleDatePickedCancel() {\r\n    setModalOpen(!modalOpen);\r\n  }\r\n\r\n  function handleDatePickedConfirm() {\r\n    setDate(tempDate);\r\n    setModalOpen(!modalOpen);\r\n  }\r\n\r\n  function handleBackDate(event) {\r\n    event.preventDefault();\r\n    setDate(date.plus({ days: -1 }));\r\n  }\r\n\r\n  function handleForwardDate(event) {\r\n    event.preventDefault();\r\n    setDate(date.plus({ days: 1 }));\r\n  }\r\n\r\n  // This is the JSX code rendered\r\n  return (\r\n    // Wrapper paper component\r\n    <Paper\r\n      sx={{\r\n        margin: '1rem 1rem 0rem',\r\n        padding: '1rem',\r\n      }}\r\n    >\r\n      <Stack\r\n        direction='column'\r\n        width='100%'\r\n        justifyContent='center'\r\n        spacing={2}\r\n      >\r\n        <Typography variant='h6' align='center' width='100%'>\r\n          LOG TIME\r\n        </Typography>\r\n        <Stack direction='row' justifyContent='center' spacing={2}>\r\n          <IconButton aria-label='delete' onClick={handleBackDate}>\r\n            <ArrowBackwardIcon />\r\n          </IconButton>\r\n          <Button\r\n            variant='contained'\r\n            onClick={handleModalOpenClose}\r\n            endIcon={<CalendarMonthIcon />}\r\n          >\r\n            {date.toFormat('dd/MM/yyyy')}\r\n          </Button>\r\n          <IconButton aria-label='delete' onClick={handleForwardDate}>\r\n            <ArrowForwardIcon />\r\n          </IconButton>\r\n        </Stack>\r\n        <div width='100%'>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={3} height='72px'>\r\n              {/* Textfield for duration */}\r\n              <TextField\r\n                // Sets id to duration\r\n                id='duration'\r\n                // Sets label to duration\r\n                label='DURATION'\r\n                // Sets the variant/style to filled\r\n                variant='outlined'\r\n                // Runs handleDurationChange whenever the textfield value changed\r\n                onChange={handleDurationChange}\r\n                // Sets value of the date field to the duration state\r\n                value={duration}\r\n                sx={{ width: '100%' }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={3} height='72px'>\r\n              {/* Client and project textfield with suggestions */}\r\n              <Autocomplete\r\n                // Sets id to CP\r\n                id='CP'\r\n                // Sets the possible inputs to CPData\r\n                options={CPData}\r\n                // Set the option selected value in the textfield to client/project's names\r\n                getOptionLabel={(option) => option.name}\r\n                // Group the options by whether they are clients or projects\r\n                groupBy={(option) => option.type}\r\n                // Assigns filterOptions to a function that filter the client and project based on the input          filterOptions={CPFilter}\r\n                filterOptions={CPFilter}\r\n                // Defines what is render as the input field\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    label='CLIENT OR PROJECT'\r\n                    variant='outlined'\r\n                  />\r\n                )}\r\n                // Assign handleAutocompleteSelectedChange to be run on change of client or project selected\r\n                onChange={handleAutocompleteSelectedChange}\r\n                // Sets the value of the client or project selected to the CPSelected state\r\n                value={CPSelected}\r\n                // Assign handleAutocompleteInputValueChange to be run on change of input entered by the user\r\n                onInputChange={handleAutocompleteInputValueChange}\r\n                // Sets the input value to the state inputValue\r\n                inputValue={inputValue}\r\n                sx={{ width: '100%' }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6} height='72px'>\r\n              {/* Custom field for description with tags */}\r\n              <DescriptionWithTagsInput\r\n                // Set initial of this component not to be empty\r\n                empty={true}\r\n                // Pass through all the tags\r\n                tags={tagsData}\r\n                // Assign handleDescriptionWithTagsData to be run to process the content in this component\r\n                data={handleDescriptionWithTagsData}\r\n                // Assign clear to null as field clearing is not required here\r\n                clear={clearField}\r\n                // Sets readOnly to false so user can edit the description\r\n                readOnly={false}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n        <div style={{ display: 'flex', justifyContent: 'end', width: '100%' }}>\r\n          {/* Log button */}\r\n          <Button\r\n            // Sets the button variant to text\r\n            variant='contained'\r\n            // Assign handleUpdateButton to be run on click of the button\r\n            onClick={handleLogButton}\r\n            // Adds a icon to the start of the button\r\n            startIcon={<AddCircleIcon />}\r\n          >\r\n            LOG\r\n          </Button>\r\n        </div>\r\n      </Stack>\r\n      <Modal open={modalOpen} onClose={handleModalOpenClose}>\r\n        <Paper\r\n          sx={{\r\n            padding: '0.5rem',\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n          }}\r\n        >\r\n          <Typography variant='h6' align='center' margin='0.5rem'>\r\n            SELECT A DATE\r\n          </Typography>\r\n          {/* Sets the library to be used for date picker */}\r\n          <LocalizationProvider dateAdapter={AdapterLuxon}>\r\n            <StaticDatePicker\r\n              displayStaticWrapperAs='desktop'\r\n              openTo='day'\r\n              value={tempDate}\r\n              onChange={handleDatePicked}\r\n              renderInput={(params) => <TextField {...params} />}\r\n            />\r\n          </LocalizationProvider>\r\n          <Stack\r\n            direction='row'\r\n            spacing={1}\r\n            justifyContent='flex-end'\r\n            marginTop='0.5rem'\r\n          >\r\n            <Button variant='text' onClick={handleDatePickedCancel}>\r\n              CANCEL\r\n            </Button>\r\n            <Button variant='text' onClick={handleDatePickedConfirm}>\r\n              CONFIRM\r\n            </Button>\r\n          </Stack>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n}\r\n\r\n// Exports LogHeader\r\nexport default LogHeader;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n// Import MUI components\r\nimport ArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport { useEffect, useState } from 'react';\r\nimport './../Styles/Home.css';\r\n// Import axios instance\r\n// Import fetching components\r\nimport fetchCPData from '../Components/LoadData/LoadCPData';\r\nimport fetchLogs from '../Components/LoadData/LoadLogs';\r\nimport fetchTagsData from '../Components/LoadData/LoadTags';\r\n// Import redux components\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addToLoadedLogsNumber } from '../Features/Logs';\r\n// Import custom components\r\nimport Header from '../Components/Header';\r\nimport LogHeader from '../Components/LogHeader';\r\nimport LogsLister from '../Components/LogsLister';\r\n// Import luxon component\r\nimport { CssBaseline } from '@mui/material';\r\nimport DashboardLoading from '../Loading Components/DashboardLoading';\r\n\r\nfunction Dashboard() {\r\n  // Creates dispatch function to update redux state\r\n  const dispatch = useDispatch();\r\n  // Create navigate function\r\n\r\n  // Defines all the states\r\n  // Stores data from server\r\n  // Stores data for a log\r\n  const logData = useSelector((state) => state.logs.value.logs);\r\n  // Stores clients and projects\r\n  const CPData = useSelector((state) => state.CPData.value);\r\n  // Store tags\r\n  const tagsData = useSelector((state) => state.tags.value);\r\n  // Stores whether data has loaded or not\r\n  // Stores whether all the clients and projects have loaded\r\n  const [isCPDataLoading, setIsCPDataLoading] = useState(\r\n    // If CPData is not empty make it false, else make it true\r\n    CPData.length > 0 ? false : true\r\n  );\r\n  // Stores whether all the tags have loaded\r\n  const [isTagsDataLoading, setIsTagsDataLoading] = useState(\r\n    // If tagsData is not empty make it false, else make it true\r\n    tagsData.length > 0 ? false : true\r\n  );\r\n  // Stores whether the logs have loaded\r\n  const [isLogDataLoading, setIsLogDataLoading] = useState(\r\n    // If logData is not empty make it false, else make it true\r\n    logData.length > 0 ? false : true\r\n  );\r\n  // Stores whether more logs a currently loading in or not\r\n  const [isMoreLogsLoading, setIsMoreLogsLoading] = useState(false);\r\n  // Other states\r\n  // Stores whether all the logs have been loaded\r\n  const allLogsLoaded = useSelector((state) => state.logs.value.allLogsLoaded);\r\n\r\n  // Runs this code on every render/update after the DOM has updated if setLogData or loadedLogsNumber have changed\r\n  useEffect(() => {\r\n    // If the log data has not loaded yet\r\n    if (isLogDataLoading) {\r\n      // Runs the function that fetches the logs\r\n      // The required setState function are passed in as well\r\n      fetchLogs(setIsLogDataLoading);\r\n    }\r\n  }, []);\r\n\r\n  // Runs this code on every render/update after the DOM has updated\r\n  useEffect(() => {\r\n    // If the CPData has not loaded yet\r\n    if (isCPDataLoading) {\r\n      // Runs the function that fetches the CPData\r\n      fetchCPData(setIsCPDataLoading);\r\n    }\r\n  }, []);\r\n\r\n  // Runs this code on every render/update after the DOM has updated\r\n  useEffect(() => {\r\n    // If the tags has not loaded yet\r\n    if (isTagsDataLoading) {\r\n      // Runs the function that fetches the tags\r\n      fetchTagsData(setIsTagsDataLoading);\r\n    }\r\n  }, []);\r\n\r\n  // Handles loading more tags\r\n  function loadMore(event) {\r\n    // Prevents the default button action\r\n    event.preventDefault();\r\n\r\n    // Add 50 to the current loadedLogsNumber\r\n    // This causes 50 more tags to be loaded\r\n    dispatch(addToLoadedLogsNumber(25));\r\n    // Set isMoreLogLoading to true to show loading animation\r\n    setIsMoreLogsLoading(true);\r\n    // Fetchs more logs\r\n    // setIsMoreLogsLoading is passthrough so that a loading icon can be displayed while data loads\r\n    fetchLogs(setIsMoreLogsLoading);\r\n  }\r\n\r\n  // If all the data has loaded\r\n  if (!isCPDataLoading && !isTagsDataLoading && !isLogDataLoading) {\r\n    // Render this JSX code\r\n    return (\r\n      // Wrapper div\r\n      <>\r\n        <CssBaseline />\r\n        {/* App bar */}\r\n        <Header page='dashboard' />\r\n        {/* LogHeader custom conponent */}\r\n        <LogHeader />\r\n        {/* LogLister */}\r\n        <LogsLister logs={logData} CPData={CPData} />\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            marginTop: '1rem',\r\n          }}\r\n        >\r\n          {/* Button that loads more logs */}\r\n          {/* If loading, loading animation will be played */}\r\n          <LoadingButton\r\n            // Sets the variant of the button to outlined\r\n            variant='contained'\r\n            // Runs the function loadMore on click causing more logs to load in\r\n            onClick={loadMore}\r\n            // If there are no more logs to load, then the button is disabled\r\n            disabled={allLogsLoaded}\r\n            // Add loading animation\r\n            // Disable shrink is used a otherwise the animation is glitchy\r\n            startIcon={<ArrowDownIcon />}\r\n            loading={isMoreLogsLoading}\r\n          >\r\n            Load More\r\n          </LoadingButton>\r\n        </div>\r\n      </>\r\n    );\r\n    // If all the data has not loaded yet\r\n  } else {\r\n    // Render this JSX code (loading component)\r\n    return <DashboardLoading />;\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n"],"names":["options","params","filtered","createFilterOptions","filter","inputValue","some","CP","name","push","type","newValue","data","setTagsSelected","setDescriptionRaw","JSON","stringify","raw","newTags","tags","tag","axiosInstance","billable","user","localStorage","getItem","sessionStorage","then","response","catch","error","detail","requestData","tagData","id","length","store","addTag","updateTags","handleDescriptionsAndTagsExtraction","setIsCPDataLoading","loadCPData","console","setIsTagsDataLoading","loadTags","log","handleNewCP","CPSelected","slice","addCP","loadingState","loadedLogsNumber","logs","value","number","addLog","setAllLogsLoaded","props","dispatch","useDispatch","tagsData","useSelector","state","CPData","useState","DateTime","date","setDate","tempDate","setTempDate","setCPSelected","duration","setDuration","descriptionRaw","tagsSelected","setInputValue","clearField","setClearField","modalOpen","setModalOpen","event","preventDefault","CPSelectedData","time","toFormat","client","project","handleModalOpenClose","Paper","sx","margin","padding","Stack","direction","width","justifyContent","spacing","Typography","variant","align","IconButton","onClick","plus","days","Button","endIcon","Grid","container","item","xs","height","TextField","label","onChange","target","Autocomplete","getOptionLabel","option","groupBy","filterOptions","CPFilter","renderInput","onInputChange","newInputValue","DescriptionWithTags","empty","clear","readOnly","style","display","startIcon","AddCircle","Modal","open","onClose","position","top","left","transform","LocalizationProvider","dateAdapter","AdapterLuxon","StaticDatePicker","displayStaticWrapperAs","openTo","newDate","marginTop","logData","isCPDataLoading","isTagsDataLoading","isLogDataLoading","setIsLogDataLoading","isMoreLogsLoading","setIsMoreLogsLoading","allLogsLoaded","useEffect","fetchLogs","fetchCPData","fetchTagsData","DashboardLoading","CssBaseline","Header","page","LogsLister","LoadingButton","addToLoadedLogsNumber","disabled","loading"],"sourceRoot":""}